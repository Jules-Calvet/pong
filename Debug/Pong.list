
Pong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004618  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004754  08004754  00014754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047dc  080047dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080047dc  080047dc  000147dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047e4  080047e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047e4  080047e4  000147e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080047ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000070  0800485c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  0800485c  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf87  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002275  00000000  00000000  0002d020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  0002f298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  0002fe70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fe0  00000000  00000000  00030940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd71  00000000  00000000  00047920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bb8c  00000000  00000000  00055691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e121d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fd0  00000000  00000000  000e1270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	0800473c 	.word	0x0800473c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	0800473c 	.word	0x0800473c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <set_new_state>:
 * @brief Set new FSM state
 * @param _new_state Enum member representing desired state.
 * It will check if desired state is contained in states list.
 */
static void set_new_state(FSM_State_Enum _new_state)
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
	// Check if desired state is contained in states array
	if ((_new_state >= 0) && (_new_state < fsm_handle->states_list_sz))
 800048e:	79fa      	ldrb	r2, [r7, #7]
 8000490:	4b16      	ldr	r3, [pc, #88]	; (80004ec <set_new_state+0x68>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000496:	429a      	cmp	r2, r3
 8000498:	d223      	bcs.n	80004e2 <set_new_state+0x5e>
	{
		// Set new FSM state UID & callback
		fsm_handle->state = fsm_handle->states_list[_new_state];
 800049a:	4b14      	ldr	r3, [pc, #80]	; (80004ec <set_new_state+0x68>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	6a1a      	ldr	r2, [r3, #32]
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	00db      	lsls	r3, r3, #3
 80004a4:	441a      	add	r2, r3
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <set_new_state+0x68>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004ae:	e883 0003 	stmia.w	r3, {r0, r1}

		// Reset execution count for variables initializations
		fsm_handle->controllers.state_execution_count = 0;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <set_new_state+0x68>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]

		// Reset animation state
		fsm_handle->controllers.animation_state = ANIMATION_RUNNING;
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <set_new_state+0x68>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2200      	movs	r2, #0
 80004c0:	751a      	strb	r2, [r3, #20]

		// Reset base time for animations
		fsm_handle->controllers.state_base_time = HAL_GetTick();
 80004c2:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <set_new_state+0x68>)
 80004c4:	681c      	ldr	r4, [r3, #0]
 80004c6:	f001 fe61 	bl	800218c <HAL_GetTick>
 80004ca:	4603      	mov	r3, r0
 80004cc:	6123      	str	r3, [r4, #16]

		//Reset button pushed counter
		fsm_handle->inputs.nb_press_btn1 = 0;
 80004ce:	4b07      	ldr	r3, [pc, #28]	; (80004ec <set_new_state+0x68>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2200      	movs	r2, #0
 80004d4:	721a      	strb	r2, [r3, #8]
		fsm_handle->inputs.nb_press_btn2 = 0;
 80004d6:	4b05      	ldr	r3, [pc, #20]	; (80004ec <set_new_state+0x68>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2200      	movs	r2, #0
 80004dc:	725a      	strb	r2, [r3, #9]

		//stop the timer loop
		stop_timer();
 80004de:	f004 f8f5 	bl	80046cc <stop_timer>
	}
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd90      	pop	{r4, r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000090 	.word	0x20000090

080004f0 <pong_init>:
 * @param _pong_handle Handle to pong peripherals
 * @param _fsm_handle Handle to Pong FSM
 * @retval HAL status
 */
HAL_StatusTypeDef pong_init(Pong_Handle_TypeDef *_pong_handle, FSM_Handle_TypeDef *_fsm_handle)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef max7219_status = HAL_OK;
 80004fa:	2300      	movs	r3, #0
 80004fc:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef led_arrray_status = HAL_OK;
 80004fe:	2300      	movs	r3, #0
 8000500:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef music_status = HAL_OK;
 8000502:	2300      	movs	r3, #0
 8000504:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef timer_status = HAL_OK;
 8000506:	2300      	movs	r3, #0
 8000508:	733b      	strb	r3, [r7, #12]

	/* Attribute input parameters */
	pong_handle = _pong_handle;
 800050a:	4a28      	ldr	r2, [pc, #160]	; (80005ac <pong_init+0xbc>)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	6013      	str	r3, [r2, #0]
	fsm_handle = _fsm_handle;
 8000510:	4a27      	ldr	r2, [pc, #156]	; (80005b0 <pong_init+0xc0>)
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	6013      	str	r3, [r2, #0]

	/* Check input parameters */
	CHECK_PONG_PARAMS();
 8000516:	4b25      	ldr	r3, [pc, #148]	; (80005ac <pong_init+0xbc>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d003      	beq.n	8000526 <pong_init+0x36>
 800051e:	4b24      	ldr	r3, [pc, #144]	; (80005b0 <pong_init+0xc0>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d107      	bne.n	8000536 <pong_init+0x46>
 8000526:	4b21      	ldr	r3, [pc, #132]	; (80005ac <pong_init+0xbc>)
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	4b20      	ldr	r3, [pc, #128]	; (80005b0 <pong_init+0xc0>)
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	2301      	movs	r3, #1
 8000534:	e036      	b.n	80005a4 <pong_init+0xb4>

	/* Init hardware peripherals */

	led_arrray_status = led_array_init(&pong_handle->led_array);
 8000536:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <pong_init+0xbc>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4618      	mov	r0, r3
 800053c:	f001 fa76 	bl	8001a2c <led_array_init>
 8000540:	4603      	mov	r3, r0
 8000542:	73bb      	strb	r3, [r7, #14]

	max7219_status = max7219_init(&pong_handle->max7219_handle);
 8000544:	4b19      	ldr	r3, [pc, #100]	; (80005ac <pong_init+0xbc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	330c      	adds	r3, #12
 800054a:	4618      	mov	r0, r3
 800054c:	f001 fb10 	bl	8001b70 <max7219_init>
 8000550:	4603      	mov	r3, r0
 8000552:	73fb      	strb	r3, [r7, #15]

	timer_status = timer_init(&pong_handle->timer_handler);
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <pong_init+0xbc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	3320      	adds	r3, #32
 800055a:	4618      	mov	r0, r3
 800055c:	f004 f858 	bl	8004610 <timer_init>
 8000560:	4603      	mov	r3, r0
 8000562:	733b      	strb	r3, [r7, #12]

	/* CHECK HARDWARE INIT BEGIN  ----------------------------------------------------------------------------------*/

	if (max7219_status != HAL_OK)
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <pong_init+0x7e>
		return max7219_status;
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	e01a      	b.n	80005a4 <pong_init+0xb4>

	else if(led_arrray_status != HAL_OK)
 800056e:	7bbb      	ldrb	r3, [r7, #14]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <pong_init+0x88>
		return led_arrray_status;
 8000574:	7bbb      	ldrb	r3, [r7, #14]
 8000576:	e015      	b.n	80005a4 <pong_init+0xb4>

	else if(music_status != HAL_OK)
 8000578:	7b7b      	ldrb	r3, [r7, #13]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <pong_init+0x92>
		return music_status;
 800057e:	7b7b      	ldrb	r3, [r7, #13]
 8000580:	e010      	b.n	80005a4 <pong_init+0xb4>

	else if(timer_status != HAL_OK)
 8000582:	7b3b      	ldrb	r3, [r7, #12]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <pong_init+0x9c>
			return timer_status;
 8000588:	7b3b      	ldrb	r3, [r7, #12]
 800058a:	e00b      	b.n	80005a4 <pong_init+0xb4>

	/* CHECK HARDWARE INIT END  ----------------------------------------------------------------------------------*/

	/* Init FSM */
	fsm_handle->states_list = states_list;
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <pong_init+0xc0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a08      	ldr	r2, [pc, #32]	; (80005b4 <pong_init+0xc4>)
 8000592:	621a      	str	r2, [r3, #32]
	fsm_handle->states_list_sz = sizeof(states_list) / sizeof(FSM_State_TypeDef);
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <pong_init+0xc0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	220b      	movs	r2, #11
 800059a:	625a      	str	r2, [r3, #36]	; 0x24
	set_new_state(STATE_START);
 800059c:	2000      	movs	r0, #0
 800059e:	f7ff ff71 	bl	8000484 <set_new_state>


	return HAL_OK;
 80005a2:	2300      	movs	r3, #0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	2000008c 	.word	0x2000008c
 80005b0:	20000090 	.word	0x20000090
 80005b4:	20000000 	.word	0x20000000

080005b8 <pong_run>:
/**
 * @brief Run pong game, execute FSM callback and check for transition
 * @retval HAL status
 */
HAL_StatusTypeDef pong_run(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	CHECK_PONG_PARAMS();
 80005bc:	4b89      	ldr	r3, [pc, #548]	; (80007e4 <pong_run+0x22c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d003      	beq.n	80005cc <pong_run+0x14>
 80005c4:	4b88      	ldr	r3, [pc, #544]	; (80007e8 <pong_run+0x230>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d107      	bne.n	80005dc <pong_run+0x24>
 80005cc:	4b85      	ldr	r3, [pc, #532]	; (80007e4 <pong_run+0x22c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	4b85      	ldr	r3, [pc, #532]	; (80007e8 <pong_run+0x230>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	2301      	movs	r3, #1
 80005da:	e100      	b.n	80007de <pong_run+0x226>

	/* RUN STATE */
	// Call associated callback
	fsm_handle->state.state_callback();
 80005dc:	4b82      	ldr	r3, [pc, #520]	; (80007e8 <pong_run+0x230>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	4798      	blx	r3

	// Increase execution count
	fsm_handle->controllers.state_execution_count += 1;
 80005e4:	4b80      	ldr	r3, [pc, #512]	; (80007e8 <pong_run+0x230>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	68da      	ldr	r2, [r3, #12]
 80005ea:	4b7f      	ldr	r3, [pc, #508]	; (80007e8 <pong_run+0x230>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	3201      	adds	r2, #1
 80005f0:	60da      	str	r2, [r3, #12]

	/* CHECK TRANSITION */
	switch (fsm_handle->state.state)
 80005f2:	4b7d      	ldr	r3, [pc, #500]	; (80007e8 <pong_run+0x230>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b0a      	cmp	r3, #10
 80005fa:	f200 80d6 	bhi.w	80007aa <pong_run+0x1f2>
 80005fe:	a201      	add	r2, pc, #4	; (adr r2, 8000604 <pong_run+0x4c>)
 8000600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000604:	08000631 	.word	0x08000631
 8000608:	08000645 	.word	0x08000645
 800060c:	08000659 	.word	0x08000659
 8000610:	0800066d 	.word	0x0800066d
 8000614:	080006a1 	.word	0x080006a1
 8000618:	080006d3 	.word	0x080006d3
 800061c:	080006fd 	.word	0x080006fd
 8000620:	08000727 	.word	0x08000727
 8000624:	0800074d 	.word	0x0800074d
 8000628:	08000773 	.word	0x08000773
 800062c:	0800078f 	.word	0x0800078f

	/* Start state */
	case STATE_START:

		//change state at the end of the music animation
		if (fsm_handle->controllers.animation_state == ANIMATION_ENDED)
 8000630:	4b6d      	ldr	r3, [pc, #436]	; (80007e8 <pong_run+0x230>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	7d1b      	ldrb	r3, [r3, #20]
 8000636:	2b01      	cmp	r3, #1
 8000638:	f040 80bb 	bne.w	80007b2 <pong_run+0x1fa>
			set_new_state(STATE_WPP1);
 800063c:	2001      	movs	r0, #1
 800063e:	f7ff ff21 	bl	8000484 <set_new_state>
		break;
 8000642:	e0b6      	b.n	80007b2 <pong_run+0x1fa>

	/* "Wait for P1 to press PB1" state */
	case STATE_WPP1:

		//change state when player 1 push his button
		if (fsm_handle->inputs.nb_press_btn1 >= 1)
 8000644:	4b68      	ldr	r3, [pc, #416]	; (80007e8 <pong_run+0x230>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	7a1b      	ldrb	r3, [r3, #8]
 800064a:	2b00      	cmp	r3, #0
 800064c:	f000 80b3 	beq.w	80007b6 <pong_run+0x1fe>
			set_new_state(STATE_GTP2);
 8000650:	2004      	movs	r0, #4
 8000652:	f7ff ff17 	bl	8000484 <set_new_state>

		break;
 8000656:	e0ae      	b.n	80007b6 <pong_run+0x1fe>

	/* "Wait for P2 to press PB2" state */
	case STATE_WPP2:

		//change state when player 1 push his button
		if (fsm_handle->inputs.nb_press_btn2 >= 1)
 8000658:	4b63      	ldr	r3, [pc, #396]	; (80007e8 <pong_run+0x230>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	7a5b      	ldrb	r3, [r3, #9]
 800065e:	2b00      	cmp	r3, #0
 8000660:	f000 80ab 	beq.w	80007ba <pong_run+0x202>
			set_new_state(STATE_GTP1);
 8000664:	2003      	movs	r0, #3
 8000666:	f7ff ff0d 	bl	8000484 <set_new_state>

		break;
 800066a:	e0a6      	b.n	80007ba <pong_run+0x202>

	/* "Go to P1" state */
	case STATE_GTP1:

		//change state if player 2 push the button before the led went tho the right border
		if (fsm_handle->inputs.nb_press_btn1 >=1 && fsm_handle->controllers.led_index < 7)
 800066c:	4b5e      	ldr	r3, [pc, #376]	; (80007e8 <pong_run+0x230>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	7a1b      	ldrb	r3, [r3, #8]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d009      	beq.n	800068a <pong_run+0xd2>
 8000676:	4b5c      	ldr	r3, [pc, #368]	; (80007e8 <pong_run+0x230>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800067e:	2b06      	cmp	r3, #6
 8000680:	dc03      	bgt.n	800068a <pong_run+0xd2>
			set_new_state(STATE_IP2S);
 8000682:	2008      	movs	r0, #8
 8000684:	f7ff fefe 	bl	8000484 <set_new_state>
		//change state if led touch the right border
		else if (fsm_handle->controllers.led_index > 7)
			set_new_state(STATE_RPP1);

		break;
 8000688:	e099      	b.n	80007be <pong_run+0x206>
		else if (fsm_handle->controllers.led_index > 7)
 800068a:	4b57      	ldr	r3, [pc, #348]	; (80007e8 <pong_run+0x230>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000692:	2b07      	cmp	r3, #7
 8000694:	f340 8093 	ble.w	80007be <pong_run+0x206>
			set_new_state(STATE_RPP1);
 8000698:	2005      	movs	r0, #5
 800069a:	f7ff fef3 	bl	8000484 <set_new_state>
		break;
 800069e:	e08e      	b.n	80007be <pong_run+0x206>

	/* "Go to P2" state */
	case STATE_GTP2:

		//change state if player 2 push the button before the led went tho the right border
		if (fsm_handle->inputs.nb_press_btn2 >=1 && fsm_handle->controllers.led_index > 0)
 80006a0:	4b51      	ldr	r3, [pc, #324]	; (80007e8 <pong_run+0x230>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	7a5b      	ldrb	r3, [r3, #9]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d009      	beq.n	80006be <pong_run+0x106>
 80006aa:	4b4f      	ldr	r3, [pc, #316]	; (80007e8 <pong_run+0x230>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	dd03      	ble.n	80006be <pong_run+0x106>
			set_new_state(STATE_IP1S);
 80006b6:	2007      	movs	r0, #7
 80006b8:	f7ff fee4 	bl	8000484 <set_new_state>
		//change state if led touch the right border
		else if (fsm_handle->controllers.led_index < 0)
			set_new_state(STATE_RPP2);

		break;
 80006bc:	e081      	b.n	80007c2 <pong_run+0x20a>
		else if (fsm_handle->controllers.led_index < 0)
 80006be:	4b4a      	ldr	r3, [pc, #296]	; (80007e8 <pong_run+0x230>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	da7b      	bge.n	80007c2 <pong_run+0x20a>
			set_new_state(STATE_RPP2);
 80006ca:	2006      	movs	r0, #6
 80006cc:	f7ff feda 	bl	8000484 <set_new_state>
		break;
 80006d0:	e077      	b.n	80007c2 <pong_run+0x20a>

	/* "Reflex press P1" state */
	case STATE_RPP1:
		//wait the led_shift_period before to test if the player pushed the button
		if (fsm_handle->controllers.state_execution_count == fsm_handle->controllers.led_shift_period) {
 80006d2:	4b45      	ldr	r3, [pc, #276]	; (80007e8 <pong_run+0x230>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	68da      	ldr	r2, [r3, #12]
 80006d8:	4b43      	ldr	r3, [pc, #268]	; (80007e8 <pong_run+0x230>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d171      	bne.n	80007c6 <pong_run+0x20e>
			//check if the player pushed his button
			if (fsm_handle->inputs.nb_press_btn1 >= 1)
 80006e2:	4b41      	ldr	r3, [pc, #260]	; (80007e8 <pong_run+0x230>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	7a1b      	ldrb	r3, [r3, #8]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d003      	beq.n	80006f4 <pong_run+0x13c>
				set_new_state(STATE_GTP2);
 80006ec:	2004      	movs	r0, #4
 80006ee:	f7ff fec9 	bl	8000484 <set_new_state>
			else
				set_new_state(STATE_IP2S);
		}
		break;
 80006f2:	e068      	b.n	80007c6 <pong_run+0x20e>
				set_new_state(STATE_IP2S);
 80006f4:	2008      	movs	r0, #8
 80006f6:	f7ff fec5 	bl	8000484 <set_new_state>
		break;
 80006fa:	e064      	b.n	80007c6 <pong_run+0x20e>

	/* "Reflex press P2" state */
	case STATE_RPP2:
		//wait the led_shift_period before to test if the player pushed the button
		if (fsm_handle->controllers.state_execution_count == fsm_handle->controllers.led_shift_period) {
 80006fc:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <pong_run+0x230>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	68da      	ldr	r2, [r3, #12]
 8000702:	4b39      	ldr	r3, [pc, #228]	; (80007e8 <pong_run+0x230>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	429a      	cmp	r2, r3
 800070a:	d15e      	bne.n	80007ca <pong_run+0x212>
			//check if the player pushed his button
			if (fsm_handle->inputs.nb_press_btn2 >= 1)
 800070c:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <pong_run+0x230>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	7a5b      	ldrb	r3, [r3, #9]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d003      	beq.n	800071e <pong_run+0x166>
				set_new_state(STATE_GTP1);
 8000716:	2003      	movs	r0, #3
 8000718:	f7ff feb4 	bl	8000484 <set_new_state>
			else
				set_new_state(STATE_IP1S);
		}
		break;
 800071c:	e055      	b.n	80007ca <pong_run+0x212>
				set_new_state(STATE_IP1S);
 800071e:	2007      	movs	r0, #7
 8000720:	f7ff feb0 	bl	8000484 <set_new_state>
		break;
 8000724:	e051      	b.n	80007ca <pong_run+0x212>

	/* "Increase P1 score" state */
	case STATE_IP1S:

		//wait the duration of the score display
		if (fsm_handle->controllers.state_execution_count == 500000) {
 8000726:	4b30      	ldr	r3, [pc, #192]	; (80007e8 <pong_run+0x230>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	4a2f      	ldr	r2, [pc, #188]	; (80007ec <pong_run+0x234>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d14d      	bne.n	80007ce <pong_run+0x216>
			//check if the player won
			if (fsm_handle->controllers.p1_score >= MAX_SCORE)
 8000732:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <pong_run+0x230>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	7d5b      	ldrb	r3, [r3, #21]
 8000738:	2b04      	cmp	r3, #4
 800073a:	d903      	bls.n	8000744 <pong_run+0x18c>
				set_new_state(STATE_P1WN);
 800073c:	2009      	movs	r0, #9
 800073e:	f7ff fea1 	bl	8000484 <set_new_state>
			else
				set_new_state(STATE_WPP2);
		}

		break;
 8000742:	e044      	b.n	80007ce <pong_run+0x216>
				set_new_state(STATE_WPP2);
 8000744:	2002      	movs	r0, #2
 8000746:	f7ff fe9d 	bl	8000484 <set_new_state>
		break;
 800074a:	e040      	b.n	80007ce <pong_run+0x216>

	/* "Increase P2 score" state */
	case STATE_IP2S:

		//wait the duration of the score display
		if (fsm_handle->controllers.state_execution_count == 500000) {
 800074c:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <pong_run+0x230>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	4a26      	ldr	r2, [pc, #152]	; (80007ec <pong_run+0x234>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d13c      	bne.n	80007d2 <pong_run+0x21a>
			//check if the player won
			if (fsm_handle->controllers.p2_score >= MAX_SCORE)
 8000758:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <pong_run+0x230>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	7d9b      	ldrb	r3, [r3, #22]
 800075e:	2b04      	cmp	r3, #4
 8000760:	d903      	bls.n	800076a <pong_run+0x1b2>
				set_new_state(STATE_P2WN);
 8000762:	200a      	movs	r0, #10
 8000764:	f7ff fe8e 	bl	8000484 <set_new_state>
			else
				set_new_state(STATE_WPP1);
		}

		break;
 8000768:	e033      	b.n	80007d2 <pong_run+0x21a>
				set_new_state(STATE_WPP1);
 800076a:	2001      	movs	r0, #1
 800076c:	f7ff fe8a 	bl	8000484 <set_new_state>
		break;
 8000770:	e02f      	b.n	80007d2 <pong_run+0x21a>

	/* "P1 Wins !" state */
	case STATE_P1WN:

		//wait until any button is pressed
		if (fsm_handle->inputs.nb_press_btn1 >= 1 || fsm_handle->inputs.nb_press_btn2 >= 1)
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <pong_run+0x230>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	7a1b      	ldrb	r3, [r3, #8]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d104      	bne.n	8000786 <pong_run+0x1ce>
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <pong_run+0x230>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	7a5b      	ldrb	r3, [r3, #9]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d027      	beq.n	80007d6 <pong_run+0x21e>
			set_new_state(STATE_WPP2);
 8000786:	2002      	movs	r0, #2
 8000788:	f7ff fe7c 	bl	8000484 <set_new_state>

		break;
 800078c:	e023      	b.n	80007d6 <pong_run+0x21e>

	/* "P1 Wins !" state */
	case STATE_P2WN:

		//wait until any button is pressed
		if (fsm_handle->inputs.nb_press_btn1 >= 1 || fsm_handle->inputs.nb_press_btn2 >= 1)
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <pong_run+0x230>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	7a1b      	ldrb	r3, [r3, #8]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d104      	bne.n	80007a2 <pong_run+0x1ea>
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <pong_run+0x230>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	7a5b      	ldrb	r3, [r3, #9]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d01b      	beq.n	80007da <pong_run+0x222>
			set_new_state(STATE_WPP1);
 80007a2:	2001      	movs	r0, #1
 80007a4:	f7ff fe6e 	bl	8000484 <set_new_state>

		break;
 80007a8:	e017      	b.n	80007da <pong_run+0x222>

	default:
		set_new_state(STATE_START);
 80007aa:	2000      	movs	r0, #0
 80007ac:	f7ff fe6a 	bl	8000484 <set_new_state>
		break;
 80007b0:	e014      	b.n	80007dc <pong_run+0x224>
		break;
 80007b2:	bf00      	nop
 80007b4:	e012      	b.n	80007dc <pong_run+0x224>
		break;
 80007b6:	bf00      	nop
 80007b8:	e010      	b.n	80007dc <pong_run+0x224>
		break;
 80007ba:	bf00      	nop
 80007bc:	e00e      	b.n	80007dc <pong_run+0x224>
		break;
 80007be:	bf00      	nop
 80007c0:	e00c      	b.n	80007dc <pong_run+0x224>
		break;
 80007c2:	bf00      	nop
 80007c4:	e00a      	b.n	80007dc <pong_run+0x224>
		break;
 80007c6:	bf00      	nop
 80007c8:	e008      	b.n	80007dc <pong_run+0x224>
		break;
 80007ca:	bf00      	nop
 80007cc:	e006      	b.n	80007dc <pong_run+0x224>
		break;
 80007ce:	bf00      	nop
 80007d0:	e004      	b.n	80007dc <pong_run+0x224>
		break;
 80007d2:	bf00      	nop
 80007d4:	e002      	b.n	80007dc <pong_run+0x224>
		break;
 80007d6:	bf00      	nop
 80007d8:	e000      	b.n	80007dc <pong_run+0x224>
		break;
 80007da:	bf00      	nop
	}

	return HAL_OK;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000008c 	.word	0x2000008c
 80007e8:	20000090 	.word	0x20000090
 80007ec:	0007a120 	.word	0x0007a120

080007f0 <state_start>:

void state_start(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

	//init variable declaration
	static uint32_t buffer7, cnt;

	//init functions of the state
	if (fsm_handle->controllers.state_execution_count == 0) {
 80007f4:	4b27      	ldr	r3, [pc, #156]	; (8000894 <state_start+0xa4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	68db      	ldr	r3, [r3, #12]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d117      	bne.n	800082e <state_start+0x3e>

		//clean the 7segments
		max7219_erase_no_decode();
 80007fe:	f001 fa53 	bl	8001ca8 <max7219_erase_no_decode>

		//init the timer buffer7
		buffer7 = fsm_handle->controllers.state_execution_count;
 8000802:	4b24      	ldr	r3, [pc, #144]	; (8000894 <state_start+0xa4>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	4a23      	ldr	r2, [pc, #140]	; (8000898 <state_start+0xa8>)
 800080a:	6013      	str	r3, [r2, #0]

		//init temp counter of the animation
		cnt = 0;
 800080c:	4b23      	ldr	r3, [pc, #140]	; (800089c <state_start+0xac>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]

		//reset scores
		fsm_handle->controllers.p1_score = 0;
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <state_start+0xa4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2200      	movs	r2, #0
 8000818:	755a      	strb	r2, [r3, #21]
		fsm_handle->controllers.p2_score = 0;
 800081a:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <state_start+0xa4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2200      	movs	r2, #0
 8000820:	759a      	strb	r2, [r3, #22]

		//reset pass count
		fsm_handle->controllers.pass_count = 0;
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <state_start+0xa4>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]

		//set_7segment(" P1 ", 1);

		start_timer();
 800082a:	f003 ff43 	bl	80046b4 <start_timer>
	 *  function to be able to call it with one or several callback functions.
	 *  But I didn't find the solves to my issues during the code writing
	 */

	//check if the animation state is on
	if (fsm_handle->controllers.animation_state == ANIMATION_RUNNING) {
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <state_start+0xa4>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	7d1b      	ldrb	r3, [r3, #20]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d12a      	bne.n	800088e <state_start+0x9e>

		/* 7SEGMENT BEGIN  ----------------------------------------------------------------------------------*/

		//check if the last animation update happened over than 20000 cycles
		if (fsm_handle->controllers.state_execution_count-buffer7>80000) {
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <state_start+0xa4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	68da      	ldr	r2, [r3, #12]
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <state_start+0xa8>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	4a16      	ldr	r2, [pc, #88]	; (80008a0 <state_start+0xb0>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d921      	bls.n	800088e <state_start+0x9e>

			//display the message with alternating between nothing and the display
			static uint8_t display_state = 0;

			/* Checking if the counter is equal to 6. If it is, it sets the animation state to ANIMATION_ENDED. */
			if (cnt == 6) {
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <state_start+0xac>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b06      	cmp	r3, #6
 8000850:	d103      	bne.n	800085a <state_start+0x6a>
				fsm_handle->controllers.animation_state = ANIMATION_ENDED;
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <state_start+0xa4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2201      	movs	r2, #1
 8000858:	751a      	strb	r2, [r3, #20]
			}


			/* Displaying the word "HOLA" on the 7-segment display. */
			if (display_state == 0) {
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <state_start+0xb4>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d10b      	bne.n	800087a <state_start+0x8a>
				display_on_7segments("SALU");
 8000862:	4811      	ldr	r0, [pc, #68]	; (80008a8 <state_start+0xb8>)
 8000864:	f001 fadc 	bl	8001e20 <display_on_7segments>
				display_state=1;
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <state_start+0xb4>)
 800086a:	2201      	movs	r2, #1
 800086c:	701a      	strb	r2, [r3, #0]
				cnt++;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <state_start+0xac>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	4a09      	ldr	r2, [pc, #36]	; (800089c <state_start+0xac>)
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	e004      	b.n	8000884 <state_start+0x94>
			}
			else {
				max7219_erase_no_decode();
 800087a:	f001 fa15 	bl	8001ca8 <max7219_erase_no_decode>
				display_state=0;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <state_start+0xb4>)
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
			}


			//the buffer7 is actualised
			buffer7=fsm_handle->controllers.state_execution_count;
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <state_start+0xa4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	68db      	ldr	r3, [r3, #12]
 800088a:	4a03      	ldr	r2, [pc, #12]	; (8000898 <state_start+0xa8>)
 800088c:	6013      	str	r3, [r2, #0]

	}

	/* ANIMATION END  ----------------------------------------------------------------------------------*/

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000090 	.word	0x20000090
 8000898:	20000094 	.word	0x20000094
 800089c:	20000098 	.word	0x20000098
 80008a0:	00013880 	.word	0x00013880
 80008a4:	2000009c 	.word	0x2000009c
 80008a8:	08004754 	.word	0x08004754

080008ac <state_wpp1>:

void state_wpp1(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

	//init variables
	///static uint32_t buffer7;

	//init functions of the state
	if (fsm_handle->controllers.state_execution_count == 0) {
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <state_wpp1+0x28>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d10a      	bne.n	80008d0 <state_wpp1+0x24>

		//clean the 7segments
		max7219_erase_no_decode();
 80008ba:	f001 f9f5 	bl	8001ca8 <max7219_erase_no_decode>

		//set 7segment display
		set_7segment(" P1 ", 1);
 80008be:	2101      	movs	r1, #1
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <state_wpp1+0x2c>)
 80008c2:	f001 fa6d 	bl	8001da0 <set_7segment>

		//set the callback function of the timer
		set_interrupt_launcher(SEGMENT);
 80008c6:	2001      	movs	r0, #1
 80008c8:	f003 feca 	bl	8004660 <set_interrupt_launcher>

		//start the timer
		start_timer();
 80008cc:	f003 fef2 	bl	80046b4 <start_timer>

	}

	/* INIT END  ----------------------------------------------------------------------------------*/
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000090 	.word	0x20000090
 80008d8:	0800475c 	.word	0x0800475c

080008dc <state_wpp2>:

void state_wpp2(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

	//init variables
	///static uint32_t buffer7;

	//init functions of the state
	if (fsm_handle->controllers.state_execution_count == 0) {
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <state_wpp2+0x28>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d10a      	bne.n	8000900 <state_wpp2+0x24>

		//clean the 7segments
		max7219_erase_no_decode();
 80008ea:	f001 f9dd 	bl	8001ca8 <max7219_erase_no_decode>


		//set the 7segment display
		set_7segment(" P2 ", 1);
 80008ee:	2101      	movs	r1, #1
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <state_wpp2+0x2c>)
 80008f2:	f001 fa55 	bl	8001da0 <set_7segment>

		//set the callback function of the timer
		set_interrupt_launcher(SEGMENT);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f003 feb2 	bl	8004660 <set_interrupt_launcher>

		//start the timer
		start_timer();
 80008fc:	f003 feda 	bl	80046b4 <start_timer>

	}

	/* INIT END  ----------------------------------------------------------------------------------*/
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000090 	.word	0x20000090
 8000908:	08004764 	.word	0x08004764

0800090c <state_gtp1>:

void state_gtp1(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

		//init variables
		static uint32_t bufferL;

		//init functions of the state
		if (fsm_handle->controllers.state_execution_count == 0) {
 8000910:	4b26      	ldr	r3, [pc, #152]	; (80009ac <state_gtp1+0xa0>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d11d      	bne.n	8000956 <state_gtp1+0x4a>

			//clean the 7segments
			max7219_erase_no_decode();
 800091a:	f001 f9c5 	bl	8001ca8 <max7219_erase_no_decode>

			//init the timer bufferof the leds
			bufferL = fsm_handle->controllers.state_execution_count;
 800091e:	4b23      	ldr	r3, [pc, #140]	; (80009ac <state_gtp1+0xa0>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	4a22      	ldr	r2, [pc, #136]	; (80009b0 <state_gtp1+0xa4>)
 8000926:	6013      	str	r3, [r2, #0]

			//clear the leds
			clear_array();
 8000928:	f001 f8ca 	bl	8001ac0 <clear_array>
			write_array(1, 1);
 800092c:	2101      	movs	r1, #1
 800092e:	2001      	movs	r0, #1
 8000930:	f001 f896 	bl	8001a60 <write_array>

			//set the led shift period to a variable which increase on each pass
			fsm_handle->controllers.led_shift_period = 80000 - (fsm_handle->controllers.pass_count * 5000);
 8000934:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <state_gtp1+0xa0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	f241 3288 	movw	r2, #5000	; 0x1388
 800093e:	fb02 f303 	mul.w	r3, r2, r3
 8000942:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <state_gtp1+0xa0>)
 8000944:	6812      	ldr	r2, [r2, #0]
 8000946:	f5c3 339c 	rsb	r3, r3, #79872	; 0x13800
 800094a:	3380      	adds	r3, #128	; 0x80
 800094c:	6193      	str	r3, [r2, #24]

			//set the start led on the right border
			fsm_handle->controllers.led_index = 2;
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <state_gtp1+0xa0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2202      	movs	r2, #2
 8000954:	75da      	strb	r2, [r3, #23]
		/* INIT END  ----------------------------------------------------------------------------------*/

		/* ANIMATION BEGIN  ----------------------------------------------------------------------------------*/

		//check if the animation state is on
		if (fsm_handle->controllers.animation_state == ANIMATION_RUNNING) {
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <state_gtp1+0xa0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	7d1b      	ldrb	r3, [r3, #20]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d122      	bne.n	80009a6 <state_gtp1+0x9a>

			/* LED BEGIN  ----------------------------------------------------------------------------------*/

			//check if the last animation update happened over than a certain amount of cycles
			if (fsm_handle->controllers.state_execution_count-bufferL > fsm_handle->controllers.led_shift_period) {
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <state_gtp1+0xa0>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	68da      	ldr	r2, [r3, #12]
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <state_gtp1+0xa4>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	1ad2      	subs	r2, r2, r3
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <state_gtp1+0xa0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	429a      	cmp	r2, r3
 8000974:	d917      	bls.n	80009a6 <state_gtp1+0x9a>

				/* Incrementing the led_index by 1. */
				clear_array();
 8000976:	f001 f8a3 	bl	8001ac0 <clear_array>
				write_array(fsm_handle->controllers.led_index, 1);
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <state_gtp1+0xa0>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000982:	2101      	movs	r1, #1
 8000984:	4618      	mov	r0, r3
 8000986:	f001 f86b 	bl	8001a60 <write_array>
				fsm_handle->controllers.led_index++;
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <state_gtp1+0xa0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f993 2017 	ldrsb.w	r2, [r3, #23]
 8000992:	b2d2      	uxtb	r2, r2
 8000994:	3201      	adds	r2, #1
 8000996:	b2d2      	uxtb	r2, r2
 8000998:	b252      	sxtb	r2, r2
 800099a:	75da      	strb	r2, [r3, #23]

				bufferL=fsm_handle->controllers.state_execution_count;
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <state_gtp1+0xa0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	4a03      	ldr	r2, [pc, #12]	; (80009b0 <state_gtp1+0xa4>)
 80009a4:	6013      	str	r3, [r2, #0]
			/* LED END  ----------------------------------------------------------------------------------*/

		}

		/* ANIMATION END  ----------------------------------------------------------------------------------*/
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000090 	.word	0x20000090
 80009b0:	200000a0 	.word	0x200000a0

080009b4 <state_gtp2>:

void state_gtp2(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0

	//init variables
	static uint32_t bufferL;

	//init functions of the state
	if (fsm_handle->controllers.state_execution_count == 0) {
 80009b8:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <state_gtp2+0xa0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d11d      	bne.n	80009fe <state_gtp2+0x4a>

		//clean the 7segments
		max7219_erase_no_decode();
 80009c2:	f001 f971 	bl	8001ca8 <max7219_erase_no_decode>

		//reinit the timer bufferof the leds
		bufferL = fsm_handle->controllers.state_execution_count;
 80009c6:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <state_gtp2+0xa0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	4a22      	ldr	r2, [pc, #136]	; (8000a58 <state_gtp2+0xa4>)
 80009ce:	6013      	str	r3, [r2, #0]

		//clear the leds
		clear_array();
 80009d0:	f001 f876 	bl	8001ac0 <clear_array>
		write_array(6, 1);
 80009d4:	2101      	movs	r1, #1
 80009d6:	2006      	movs	r0, #6
 80009d8:	f001 f842 	bl	8001a60 <write_array>

		//set the led shift period to a variable which increase on each pass
		fsm_handle->controllers.led_shift_period = 80000 - (fsm_handle->controllers.pass_count * 5000);
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <state_gtp2+0xa0>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80009e6:	fb02 f303 	mul.w	r3, r2, r3
 80009ea:	4a1a      	ldr	r2, [pc, #104]	; (8000a54 <state_gtp2+0xa0>)
 80009ec:	6812      	ldr	r2, [r2, #0]
 80009ee:	f5c3 339c 	rsb	r3, r3, #79872	; 0x13800
 80009f2:	3380      	adds	r3, #128	; 0x80
 80009f4:	6193      	str	r3, [r2, #24]

		//set the start led on the left border
		fsm_handle->controllers.led_index = 5;
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <state_gtp2+0xa0>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2205      	movs	r2, #5
 80009fc:	75da      	strb	r2, [r3, #23]
	/* INIT END  ----------------------------------------------------------------------------------*/

	/* ANIMATION BEGIN  ----------------------------------------------------------------------------------*/

	//check if the animation state is on
	if (fsm_handle->controllers.animation_state == ANIMATION_RUNNING) {
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <state_gtp2+0xa0>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	7d1b      	ldrb	r3, [r3, #20]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d122      	bne.n	8000a4e <state_gtp2+0x9a>

		/* LED BEGIN  ----------------------------------------------------------------------------------*/

		//check if the last animation update happened over than a certain amount of cycles
		if (fsm_handle->controllers.state_execution_count-bufferL > fsm_handle->controllers.led_shift_period) {
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <state_gtp2+0xa0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68da      	ldr	r2, [r3, #12]
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <state_gtp2+0xa4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	1ad2      	subs	r2, r2, r3
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <state_gtp2+0xa0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d917      	bls.n	8000a4e <state_gtp2+0x9a>

			clear_array();
 8000a1e:	f001 f84f 	bl	8001ac0 <clear_array>
			write_array(fsm_handle->controllers.led_index, 1);
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <state_gtp2+0xa0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 f817 	bl	8001a60 <write_array>
			fsm_handle->controllers.led_index--;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <state_gtp2+0xa0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f993 2017 	ldrsb.w	r2, [r3, #23]
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	3a01      	subs	r2, #1
 8000a3e:	b2d2      	uxtb	r2, r2
 8000a40:	b252      	sxtb	r2, r2
 8000a42:	75da      	strb	r2, [r3, #23]

			bufferL=fsm_handle->controllers.state_execution_count;
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <state_gtp2+0xa0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	4a03      	ldr	r2, [pc, #12]	; (8000a58 <state_gtp2+0xa4>)
 8000a4c:	6013      	str	r3, [r2, #0]

	}

	/* ANIMATION END  ----------------------------------------------------------------------------------*/

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000090 	.word	0x20000090
 8000a58:	200000a4 	.word	0x200000a4

08000a5c <state_rpp1>:

void state_rpp1(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	/* INIT BEGIN  ----------------------------------------------------------------------------------*/

	//init functions of the state
	if (fsm_handle->controllers.state_execution_count == 0) {
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <state_rpp1+0x2c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d10c      	bne.n	8000a84 <state_rpp1+0x28>

		//clean the 7segments
		max7219_erase_no_decode();
 8000a6a:	f001 f91d 	bl	8001ca8 <max7219_erase_no_decode>

		//clear the leds
		clear_array();
 8000a6e:	f001 f827 	bl	8001ac0 <clear_array>

		//switch on the led border
		write_array(7, 1);
 8000a72:	2101      	movs	r1, #1
 8000a74:	2007      	movs	r0, #7
 8000a76:	f000 fff3 	bl	8001a60 <write_array>

		//increment the speed
		fsm_handle->controllers.pass_count++;
 8000a7a:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <state_rpp1+0x2c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	69da      	ldr	r2, [r3, #28]
 8000a80:	3201      	adds	r2, #1
 8000a82:	61da      	str	r2, [r3, #28]
	}

	/* INIT END  ----------------------------------------------------------------------------------*/
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000090 	.word	0x20000090

08000a8c <state_rpp2>:

void state_rpp2(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	/* INIT BEGIN  ----------------------------------------------------------------------------------*/

	//init functions of the state
	if (fsm_handle->controllers.state_execution_count == 0) {
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <state_rpp2+0x2c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d10c      	bne.n	8000ab4 <state_rpp2+0x28>

		//clean the 7segments
		max7219_erase_no_decode();
 8000a9a:	f001 f905 	bl	8001ca8 <max7219_erase_no_decode>

		//clear the leds
		clear_array();
 8000a9e:	f001 f80f 	bl	8001ac0 <clear_array>

		//switch on the led border
		write_array(0, 1);
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f000 ffdb 	bl	8001a60 <write_array>

		//increment the speed
		fsm_handle->controllers.pass_count++;
 8000aaa:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <state_rpp2+0x2c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	69da      	ldr	r2, [r3, #28]
 8000ab0:	3201      	adds	r2, #1
 8000ab2:	61da      	str	r2, [r3, #28]
	}

	/* INIT END  ----------------------------------------------------------------------------------*/
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000090 	.word	0x20000090

08000abc <state_ip1s>:

void state_ip1s(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	/* INIT BEGIN  ----------------------------------------------------------------------------------*/

	//init functions of the state
	if (fsm_handle->controllers.state_execution_count == 0) {
 8000ac0:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <state_ip1s+0xa0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d145      	bne.n	8000b56 <state_ip1s+0x9a>

		//clean the 7segments
		max7219_erase_no_decode();
 8000aca:	f001 f8ed 	bl	8001ca8 <max7219_erase_no_decode>

		//clear the leds
		clear_array();
 8000ace:	f000 fff7 	bl	8001ac0 <clear_array>

		//increment player's score
		fsm_handle->controllers.p1_score++;
 8000ad2:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <state_ip1s+0xa0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	7d5a      	ldrb	r2, [r3, #21]
 8000ad8:	3201      	adds	r2, #1
 8000ada:	b2d2      	uxtb	r2, r2
 8000adc:	755a      	strb	r2, [r3, #21]

		//reset pass count
		fsm_handle->controllers.pass_count = 0;
 8000ade:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <state_ip1s+0xa0>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]

		//display the new score of the winner
		max7219_display_no_decode(0, 0b1100111);
 8000ae6:	2167      	movs	r1, #103	; 0x67
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f001 f89f 	bl	8001c2c <max7219_display_no_decode>
		max7219_display_no_decode(1, 0b0110000);
 8000aee:	2130      	movs	r1, #48	; 0x30
 8000af0:	2001      	movs	r0, #1
 8000af2:	f001 f89b 	bl	8001c2c <max7219_display_no_decode>
		max7219_display_no_decode(2, 0b1001);
 8000af6:	2109      	movs	r1, #9
 8000af8:	2002      	movs	r0, #2
 8000afa:	f001 f897 	bl	8001c2c <max7219_display_no_decode>
		switch (fsm_handle->controllers.p1_score) {
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <state_ip1s+0xa0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	7d5b      	ldrb	r3, [r3, #21]
 8000b04:	3b01      	subs	r3, #1
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	d826      	bhi.n	8000b58 <state_ip1s+0x9c>
 8000b0a:	a201      	add	r2, pc, #4	; (adr r2, 8000b10 <state_ip1s+0x54>)
 8000b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b10:	08000b25 	.word	0x08000b25
 8000b14:	08000b2f 	.word	0x08000b2f
 8000b18:	08000b39 	.word	0x08000b39
 8000b1c:	08000b43 	.word	0x08000b43
 8000b20:	08000b4d 	.word	0x08000b4d
		case 1: max7219_display_no_decode(3, 0b0110000); break;
 8000b24:	2130      	movs	r1, #48	; 0x30
 8000b26:	2003      	movs	r0, #3
 8000b28:	f001 f880 	bl	8001c2c <max7219_display_no_decode>
 8000b2c:	e014      	b.n	8000b58 <state_ip1s+0x9c>
		case 2: max7219_display_no_decode(3, 0b1101101); break;
 8000b2e:	216d      	movs	r1, #109	; 0x6d
 8000b30:	2003      	movs	r0, #3
 8000b32:	f001 f87b 	bl	8001c2c <max7219_display_no_decode>
 8000b36:	e00f      	b.n	8000b58 <state_ip1s+0x9c>
		case 3: max7219_display_no_decode(3, 0b1111001); break;
 8000b38:	2179      	movs	r1, #121	; 0x79
 8000b3a:	2003      	movs	r0, #3
 8000b3c:	f001 f876 	bl	8001c2c <max7219_display_no_decode>
 8000b40:	e00a      	b.n	8000b58 <state_ip1s+0x9c>
		case 4: max7219_display_no_decode(3, 0b0110011); break;
 8000b42:	2133      	movs	r1, #51	; 0x33
 8000b44:	2003      	movs	r0, #3
 8000b46:	f001 f871 	bl	8001c2c <max7219_display_no_decode>
 8000b4a:	e005      	b.n	8000b58 <state_ip1s+0x9c>
		case 5: max7219_display_no_decode(3, 0b1011011); break;
 8000b4c:	215b      	movs	r1, #91	; 0x5b
 8000b4e:	2003      	movs	r0, #3
 8000b50:	f001 f86c 	bl	8001c2c <max7219_display_no_decode>
 8000b54:	e000      	b.n	8000b58 <state_ip1s+0x9c>
		}

	}
 8000b56:	bf00      	nop

	/* INIT END  ----------------------------------------------------------------------------------*/
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000090 	.word	0x20000090

08000b60 <state_ip2s>:

void state_ip2s(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	/* INIT BEGIN  ----------------------------------------------------------------------------------*/

	//init functions of the state
	if (fsm_handle->controllers.state_execution_count == 0) {
 8000b64:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <state_ip2s+0xa4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d147      	bne.n	8000bfe <state_ip2s+0x9e>

		//clean the 7segments
		max7219_erase_no_decode();
 8000b6e:	f001 f89b 	bl	8001ca8 <max7219_erase_no_decode>
		max7219_erase_decode();
 8000b72:	f001 f8d7 	bl	8001d24 <max7219_erase_decode>

		//clear the leds
		clear_array();
 8000b76:	f000 ffa3 	bl	8001ac0 <clear_array>

		//increment player's score
		fsm_handle->controllers.p2_score++;
 8000b7a:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <state_ip2s+0xa4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	7d9a      	ldrb	r2, [r3, #22]
 8000b80:	3201      	adds	r2, #1
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	759a      	strb	r2, [r3, #22]

		//reset pass count
		fsm_handle->controllers.pass_count = 0;
 8000b86:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <state_ip2s+0xa4>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]


		//display the new score of the winner
		max7219_display_no_decode(0, 0b1100111);
 8000b8e:	2167      	movs	r1, #103	; 0x67
 8000b90:	2000      	movs	r0, #0
 8000b92:	f001 f84b 	bl	8001c2c <max7219_display_no_decode>
		max7219_display_no_decode(1, 0b1101101);
 8000b96:	216d      	movs	r1, #109	; 0x6d
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f001 f847 	bl	8001c2c <max7219_display_no_decode>
		max7219_display_no_decode(2, 0b1001);
 8000b9e:	2109      	movs	r1, #9
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	f001 f843 	bl	8001c2c <max7219_display_no_decode>
		switch (fsm_handle->controllers.p2_score) {
 8000ba6:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <state_ip2s+0xa4>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	7d9b      	ldrb	r3, [r3, #22]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	d826      	bhi.n	8000c00 <state_ip2s+0xa0>
 8000bb2:	a201      	add	r2, pc, #4	; (adr r2, 8000bb8 <state_ip2s+0x58>)
 8000bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb8:	08000bcd 	.word	0x08000bcd
 8000bbc:	08000bd7 	.word	0x08000bd7
 8000bc0:	08000be1 	.word	0x08000be1
 8000bc4:	08000beb 	.word	0x08000beb
 8000bc8:	08000bf5 	.word	0x08000bf5
		case 1: max7219_display_no_decode(3, 0b0110000); break;
 8000bcc:	2130      	movs	r1, #48	; 0x30
 8000bce:	2003      	movs	r0, #3
 8000bd0:	f001 f82c 	bl	8001c2c <max7219_display_no_decode>
 8000bd4:	e014      	b.n	8000c00 <state_ip2s+0xa0>
		case 2: max7219_display_no_decode(3, 0b1101101); break;
 8000bd6:	216d      	movs	r1, #109	; 0x6d
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f001 f827 	bl	8001c2c <max7219_display_no_decode>
 8000bde:	e00f      	b.n	8000c00 <state_ip2s+0xa0>
		case 3: max7219_display_no_decode(3, 0b1111001); break;
 8000be0:	2179      	movs	r1, #121	; 0x79
 8000be2:	2003      	movs	r0, #3
 8000be4:	f001 f822 	bl	8001c2c <max7219_display_no_decode>
 8000be8:	e00a      	b.n	8000c00 <state_ip2s+0xa0>
		case 4: max7219_display_no_decode(3, 0b0110011); break;
 8000bea:	2133      	movs	r1, #51	; 0x33
 8000bec:	2003      	movs	r0, #3
 8000bee:	f001 f81d 	bl	8001c2c <max7219_display_no_decode>
 8000bf2:	e005      	b.n	8000c00 <state_ip2s+0xa0>
		case 5: max7219_display_no_decode(3, 0b1011011); break;
 8000bf4:	215b      	movs	r1, #91	; 0x5b
 8000bf6:	2003      	movs	r0, #3
 8000bf8:	f001 f818 	bl	8001c2c <max7219_display_no_decode>
 8000bfc:	e000      	b.n	8000c00 <state_ip2s+0xa0>
		}

	}
 8000bfe:	bf00      	nop

	/* INIT END  ----------------------------------------------------------------------------------*/
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000090 	.word	0x20000090

08000c08 <state_p1wn>:

void state_p1wn(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0

	//init variables
	static uint32_t buffer7;

	//init functions of the state
	if (fsm_handle->controllers.state_execution_count == 0) {
 8000c0e:	4baf      	ldr	r3, [pc, #700]	; (8000ecc <state_p1wn+0x2c4>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d116      	bne.n	8000c46 <state_p1wn+0x3e>

		//clean the 7segments
		max7219_erase_no_decode();
 8000c18:	f001 f846 	bl	8001ca8 <max7219_erase_no_decode>

		//clear the leds
		clear_array();
 8000c1c:	f000 ff50 	bl	8001ac0 <clear_array>

		//init the timer buffer7
		buffer7 = fsm_handle->controllers.state_execution_count;
 8000c20:	4baa      	ldr	r3, [pc, #680]	; (8000ecc <state_p1wn+0x2c4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	4aaa      	ldr	r2, [pc, #680]	; (8000ed0 <state_p1wn+0x2c8>)
 8000c28:	6013      	str	r3, [r2, #0]

		//reset scores
		fsm_handle->controllers.p1_score = 0;
 8000c2a:	4ba8      	ldr	r3, [pc, #672]	; (8000ecc <state_p1wn+0x2c4>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	755a      	strb	r2, [r3, #21]
		fsm_handle->controllers.p2_score = 0;
 8000c32:	4ba6      	ldr	r3, [pc, #664]	; (8000ecc <state_p1wn+0x2c4>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2200      	movs	r2, #0
 8000c38:	759a      	strb	r2, [r3, #22]

		//reset pass count
		fsm_handle->controllers.pass_count = 0;
 8000c3a:	4ba4      	ldr	r3, [pc, #656]	; (8000ecc <state_p1wn+0x2c4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]

		/*starting the timer. */
		start_timer();
 8000c42:	f003 fd37 	bl	80046b4 <start_timer>
	/* INIT END  ----------------------------------------------------------------------------------*/

	/* ANIMATION BEGIN  ----------------------------------------------------------------------------------*/

	//check if the animation state is on
	if (fsm_handle->controllers.animation_state == ANIMATION_RUNNING) {
 8000c46:	4ba1      	ldr	r3, [pc, #644]	; (8000ecc <state_p1wn+0x2c4>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	7d1b      	ldrb	r3, [r3, #20]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f040 8139 	bne.w	8000ec4 <state_p1wn+0x2bc>

		/* 7SEGMENT BEGIN  ----------------------------------------------------------------------------------*/

		//check if the last animation update happened over than 20000 cycles
		if (fsm_handle->controllers.state_execution_count-buffer7>80000) {
 8000c52:	4b9e      	ldr	r3, [pc, #632]	; (8000ecc <state_p1wn+0x2c4>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	68da      	ldr	r2, [r3, #12]
 8000c58:	4b9d      	ldr	r3, [pc, #628]	; (8000ed0 <state_p1wn+0x2c8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	4a9d      	ldr	r2, [pc, #628]	; (8000ed4 <state_p1wn+0x2cc>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	f240 812f 	bls.w	8000ec4 <state_p1wn+0x2bc>

			max7219_erase_no_decode();
 8000c66:	f001 f81f 	bl	8001ca8 <max7219_erase_no_decode>

			static uint8_t shift_state = 0;

			//display a message with shifting the letter in order to see the overall message
			for (int i=0;i<4;i++) {
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	e113      	b.n	8000e98 <state_p1wn+0x290>
				switch (i+shift_state) {
 8000c70:	4b99      	ldr	r3, [pc, #612]	; (8000ed8 <state_p1wn+0x2d0>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	2b1c      	cmp	r3, #28
 8000c7c:	f200 8109 	bhi.w	8000e92 <state_p1wn+0x28a>
 8000c80:	a201      	add	r2, pc, #4	; (adr r2, 8000c88 <state_p1wn+0x80>)
 8000c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c86:	bf00      	nop
 8000c88:	08000cfd 	.word	0x08000cfd
 8000c8c:	08000d0b 	.word	0x08000d0b
 8000c90:	08000d19 	.word	0x08000d19
 8000c94:	08000d27 	.word	0x08000d27
 8000c98:	08000d35 	.word	0x08000d35
 8000c9c:	08000d43 	.word	0x08000d43
 8000ca0:	08000d51 	.word	0x08000d51
 8000ca4:	08000d5f 	.word	0x08000d5f
 8000ca8:	08000d6d 	.word	0x08000d6d
 8000cac:	08000d7b 	.word	0x08000d7b
 8000cb0:	08000d89 	.word	0x08000d89
 8000cb4:	08000d97 	.word	0x08000d97
 8000cb8:	08000da5 	.word	0x08000da5
 8000cbc:	08000db3 	.word	0x08000db3
 8000cc0:	08000dc1 	.word	0x08000dc1
 8000cc4:	08000dcf 	.word	0x08000dcf
 8000cc8:	08000ddd 	.word	0x08000ddd
 8000ccc:	08000deb 	.word	0x08000deb
 8000cd0:	08000df9 	.word	0x08000df9
 8000cd4:	08000e07 	.word	0x08000e07
 8000cd8:	08000e15 	.word	0x08000e15
 8000cdc:	08000e23 	.word	0x08000e23
 8000ce0:	08000e31 	.word	0x08000e31
 8000ce4:	08000e3f 	.word	0x08000e3f
 8000ce8:	08000e4d 	.word	0x08000e4d
 8000cec:	08000e5b 	.word	0x08000e5b
 8000cf0:	08000e69 	.word	0x08000e69
 8000cf4:	08000e77 	.word	0x08000e77
 8000cf8:	08000e85 	.word	0x08000e85
				case 0: max7219_display_no_decode(i, 0b0); break;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 ff92 	bl	8001c2c <max7219_display_no_decode>
 8000d08:	e0c3      	b.n	8000e92 <state_p1wn+0x28a>
				case 1: max7219_display_no_decode(i, 0b0); break;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 ff8b 	bl	8001c2c <max7219_display_no_decode>
 8000d16:	e0bc      	b.n	8000e92 <state_p1wn+0x28a>
				case 2: max7219_display_no_decode(i, 0b0); break;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 ff84 	bl	8001c2c <max7219_display_no_decode>
 8000d24:	e0b5      	b.n	8000e92 <state_p1wn+0x28a>
				case 3: max7219_display_no_decode(i, 0b0); break;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 ff7d 	bl	8001c2c <max7219_display_no_decode>
 8000d32:	e0ae      	b.n	8000e92 <state_p1wn+0x28a>
				case 4: max7219_display_no_decode(i, 0b0010101); break; 	//n
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2115      	movs	r1, #21
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 ff76 	bl	8001c2c <max7219_display_no_decode>
 8000d40:	e0a7      	b.n	8000e92 <state_p1wn+0x28a>
				case 5: max7219_display_no_decode(i, 0b0010000); break; 	//i
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2110      	movs	r1, #16
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 ff6f 	bl	8001c2c <max7219_display_no_decode>
 8000d4e:	e0a0      	b.n	8000e92 <state_p1wn+0x28a>
				case 6: max7219_display_no_decode(i, 0b0001101); break; 	//c
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	210d      	movs	r1, #13
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 ff68 	bl	8001c2c <max7219_display_no_decode>
 8000d5c:	e099      	b.n	8000e92 <state_p1wn+0x28a>
				case 7: max7219_display_no_decode(i, 0b1001111); break; 	//E
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	214f      	movs	r1, #79	; 0x4f
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 ff61 	bl	8001c2c <max7219_display_no_decode>
 8000d6a:	e092      	b.n	8000e92 <state_p1wn+0x28a>
				case 8: max7219_display_no_decode(i, 0b0); break; 			//
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 ff5a 	bl	8001c2c <max7219_display_no_decode>
 8000d78:	e08b      	b.n	8000e92 <state_p1wn+0x28a>
				case 9: max7219_display_no_decode(i, 0b1100111); break; 	//P
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2167      	movs	r1, #103	; 0x67
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 ff53 	bl	8001c2c <max7219_display_no_decode>
 8000d86:	e084      	b.n	8000e92 <state_p1wn+0x28a>
				case 10: max7219_display_no_decode(i, 0b0001110); break;	//L
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	210e      	movs	r1, #14
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 ff4c 	bl	8001c2c <max7219_display_no_decode>
 8000d94:	e07d      	b.n	8000e92 <state_p1wn+0x28a>
				case 11: max7219_display_no_decode(i, 0b1110111); break;	//A
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2177      	movs	r1, #119	; 0x77
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 ff45 	bl	8001c2c <max7219_display_no_decode>
 8000da2:	e076      	b.n	8000e92 <state_p1wn+0x28a>
				case 12: max7219_display_no_decode(i, 0b0100111); break;	//Y
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2127      	movs	r1, #39	; 0x27
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 ff3e 	bl	8001c2c <max7219_display_no_decode>
 8000db0:	e06f      	b.n	8000e92 <state_p1wn+0x28a>
				case 13: max7219_display_no_decode(i, 0b1001111); break;	//E
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	214f      	movs	r1, #79	; 0x4f
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 ff37 	bl	8001c2c <max7219_display_no_decode>
 8000dbe:	e068      	b.n	8000e92 <state_p1wn+0x28a>
				case 14: max7219_display_no_decode(i, 0b0000101); break;	//r
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2105      	movs	r1, #5
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 ff30 	bl	8001c2c <max7219_display_no_decode>
 8000dcc:	e061      	b.n	8000e92 <state_p1wn+0x28a>
				case 15: max7219_display_no_decode(i, 0b0); break;			//
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 ff29 	bl	8001c2c <max7219_display_no_decode>
 8000dda:	e05a      	b.n	8000e92 <state_p1wn+0x28a>
				case 16: max7219_display_no_decode(i, 0b0110000); break;	//1
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2130      	movs	r1, #48	; 0x30
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 ff22 	bl	8001c2c <max7219_display_no_decode>
 8000de8:	e053      	b.n	8000e92 <state_p1wn+0x28a>
				case 17: max7219_display_no_decode(i, 0b0); break;			//
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 ff1b 	bl	8001c2c <max7219_display_no_decode>
 8000df6:	e04c      	b.n	8000e92 <state_p1wn+0x28a>
				case 18: max7219_display_no_decode(i, 0b0100111); break;	//Y
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2127      	movs	r1, #39	; 0x27
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 ff14 	bl	8001c2c <max7219_display_no_decode>
 8000e04:	e045      	b.n	8000e92 <state_p1wn+0x28a>
				case 19: max7219_display_no_decode(i, 0b0000101); break;	//r
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2105      	movs	r1, #5
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 ff0d 	bl	8001c2c <max7219_display_no_decode>
 8000e12:	e03e      	b.n	8000e92 <state_p1wn+0x28a>
				case 20: max7219_display_no_decode(i, 0b0); break;			//
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 ff06 	bl	8001c2c <max7219_display_no_decode>
 8000e20:	e037      	b.n	8000e92 <state_p1wn+0x28a>
				case 21: max7219_display_no_decode(i, 0b1001110); break;	//C
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	214e      	movs	r1, #78	; 0x4e
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 feff 	bl	8001c2c <max7219_display_no_decode>
 8000e2e:	e030      	b.n	8000e92 <state_p1wn+0x28a>
				case 22: max7219_display_no_decode(i, 0b1111110); break;	//O
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	217e      	movs	r1, #126	; 0x7e
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 fef8 	bl	8001c2c <max7219_display_no_decode>
 8000e3c:	e029      	b.n	8000e92 <state_p1wn+0x28a>
				case 23: max7219_display_no_decode(i, 0b1111110); break;	//O
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	217e      	movs	r1, #126	; 0x7e
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fef1 	bl	8001c2c <max7219_display_no_decode>
 8000e4a:	e022      	b.n	8000e92 <state_p1wn+0x28a>
				case 24: max7219_display_no_decode(i, 0b0001110); break;	//L
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	210e      	movs	r1, #14
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 feea 	bl	8001c2c <max7219_display_no_decode>
 8000e58:	e01b      	b.n	8000e92 <state_p1wn+0x28a>
				case 25: max7219_display_no_decode(i, 0b0); break;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 fee3 	bl	8001c2c <max7219_display_no_decode>
 8000e66:	e014      	b.n	8000e92 <state_p1wn+0x28a>
				case 26: max7219_display_no_decode(i, 0b0); break;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fedc 	bl	8001c2c <max7219_display_no_decode>
 8000e74:	e00d      	b.n	8000e92 <state_p1wn+0x28a>
				case 27: max7219_display_no_decode(i, 0b0); break;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 fed5 	bl	8001c2c <max7219_display_no_decode>
 8000e82:	e006      	b.n	8000e92 <state_p1wn+0x28a>
				case 28: max7219_display_no_decode(i, 0b0); break;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fece 	bl	8001c2c <max7219_display_no_decode>
 8000e90:	bf00      	nop
			for (int i=0;i<4;i++) {
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3301      	adds	r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	f77f aee8 	ble.w	8000c70 <state_p1wn+0x68>
				}
			}
			shift_state++;
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <state_p1wn+0x2d0>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <state_p1wn+0x2d0>)
 8000eaa:	701a      	strb	r2, [r3, #0]

			if (shift_state+3 > 28)
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <state_p1wn+0x2d0>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b19      	cmp	r3, #25
 8000eb2:	d902      	bls.n	8000eba <state_p1wn+0x2b2>
				shift_state = 0;
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <state_p1wn+0x2d0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]

			//the buffer7 is actualised
			buffer7=fsm_handle->controllers.state_execution_count;
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <state_p1wn+0x2c4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	4a03      	ldr	r2, [pc, #12]	; (8000ed0 <state_p1wn+0x2c8>)
 8000ec2:	6013      	str	r3, [r2, #0]
		/* 7SEGMENT END  ----------------------------------------------------------------------------------*/

	}

	/* ANIMATION END  ----------------------------------------------------------------------------------*/
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000090 	.word	0x20000090
 8000ed0:	200000a8 	.word	0x200000a8
 8000ed4:	00013880 	.word	0x00013880
 8000ed8:	200000ac 	.word	0x200000ac

08000edc <state_p2wn>:

void state_p2wn(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

	//init variables
	static uint32_t buffer7;

	//init functions of the state
	if (fsm_handle->controllers.state_execution_count == 0) {
 8000ee2:	4bb0      	ldr	r3, [pc, #704]	; (80011a4 <state_p2wn+0x2c8>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d118      	bne.n	8000f1e <state_p2wn+0x42>

		//clean the 7segments
		max7219_erase_no_decode();
 8000eec:	f000 fedc 	bl	8001ca8 <max7219_erase_no_decode>
		max7219_erase_decode();
 8000ef0:	f000 ff18 	bl	8001d24 <max7219_erase_decode>

		//clear the leds
		clear_array();
 8000ef4:	f000 fde4 	bl	8001ac0 <clear_array>

		//init the timer buffer7
		buffer7 = fsm_handle->controllers.state_execution_count;
 8000ef8:	4baa      	ldr	r3, [pc, #680]	; (80011a4 <state_p2wn+0x2c8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	4aaa      	ldr	r2, [pc, #680]	; (80011a8 <state_p2wn+0x2cc>)
 8000f00:	6013      	str	r3, [r2, #0]

		//reset scores
		fsm_handle->controllers.p1_score = 0;
 8000f02:	4ba8      	ldr	r3, [pc, #672]	; (80011a4 <state_p2wn+0x2c8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2200      	movs	r2, #0
 8000f08:	755a      	strb	r2, [r3, #21]
		fsm_handle->controllers.p2_score = 0;
 8000f0a:	4ba6      	ldr	r3, [pc, #664]	; (80011a4 <state_p2wn+0x2c8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	759a      	strb	r2, [r3, #22]

		//reset pass count
		fsm_handle->controllers.pass_count = 0;
 8000f12:	4ba4      	ldr	r3, [pc, #656]	; (80011a4 <state_p2wn+0x2c8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]

		start_timer();
 8000f1a:	f003 fbcb 	bl	80046b4 <start_timer>
	/* INIT END  ----------------------------------------------------------------------------------*/

	/* ANIMATION BEGIN  ----------------------------------------------------------------------------------*/

	//check if the animation state is on
	if (fsm_handle->controllers.animation_state == ANIMATION_RUNNING) {
 8000f1e:	4ba1      	ldr	r3, [pc, #644]	; (80011a4 <state_p2wn+0x2c8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	7d1b      	ldrb	r3, [r3, #20]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f040 8139 	bne.w	800119c <state_p2wn+0x2c0>

		/* 7SEGMENT BEGIN  ----------------------------------------------------------------------------------*/

		//check if the last animation update happened over than 20000 cycles
		if (fsm_handle->controllers.state_execution_count-buffer7>80000) {
 8000f2a:	4b9e      	ldr	r3, [pc, #632]	; (80011a4 <state_p2wn+0x2c8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	4b9d      	ldr	r3, [pc, #628]	; (80011a8 <state_p2wn+0x2cc>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	4a9d      	ldr	r2, [pc, #628]	; (80011ac <state_p2wn+0x2d0>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	f240 812f 	bls.w	800119c <state_p2wn+0x2c0>


			max7219_erase_no_decode();
 8000f3e:	f000 feb3 	bl	8001ca8 <max7219_erase_no_decode>

			static uint8_t shift_state = 0;

			//display a message with shifting the letter in order to see the overall message
			for (int i=0;i<4;i++) {
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	e113      	b.n	8001170 <state_p2wn+0x294>
				switch (i+shift_state) {
 8000f48:	4b99      	ldr	r3, [pc, #612]	; (80011b0 <state_p2wn+0x2d4>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	2b1c      	cmp	r3, #28
 8000f54:	f200 8109 	bhi.w	800116a <state_p2wn+0x28e>
 8000f58:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <state_p2wn+0x84>)
 8000f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5e:	bf00      	nop
 8000f60:	08000fd5 	.word	0x08000fd5
 8000f64:	08000fe3 	.word	0x08000fe3
 8000f68:	08000ff1 	.word	0x08000ff1
 8000f6c:	08000fff 	.word	0x08000fff
 8000f70:	0800100d 	.word	0x0800100d
 8000f74:	0800101b 	.word	0x0800101b
 8000f78:	08001029 	.word	0x08001029
 8000f7c:	08001037 	.word	0x08001037
 8000f80:	08001045 	.word	0x08001045
 8000f84:	08001053 	.word	0x08001053
 8000f88:	08001061 	.word	0x08001061
 8000f8c:	0800106f 	.word	0x0800106f
 8000f90:	0800107d 	.word	0x0800107d
 8000f94:	0800108b 	.word	0x0800108b
 8000f98:	08001099 	.word	0x08001099
 8000f9c:	080010a7 	.word	0x080010a7
 8000fa0:	080010b5 	.word	0x080010b5
 8000fa4:	080010c3 	.word	0x080010c3
 8000fa8:	080010d1 	.word	0x080010d1
 8000fac:	080010df 	.word	0x080010df
 8000fb0:	080010ed 	.word	0x080010ed
 8000fb4:	080010fb 	.word	0x080010fb
 8000fb8:	08001109 	.word	0x08001109
 8000fbc:	08001117 	.word	0x08001117
 8000fc0:	08001125 	.word	0x08001125
 8000fc4:	08001133 	.word	0x08001133
 8000fc8:	08001141 	.word	0x08001141
 8000fcc:	0800114f 	.word	0x0800114f
 8000fd0:	0800115d 	.word	0x0800115d
				case 0: max7219_display_no_decode(i, 0b0); break;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fe26 	bl	8001c2c <max7219_display_no_decode>
 8000fe0:	e0c3      	b.n	800116a <state_p2wn+0x28e>
				case 1: max7219_display_no_decode(i, 0b0); break;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 fe1f 	bl	8001c2c <max7219_display_no_decode>
 8000fee:	e0bc      	b.n	800116a <state_p2wn+0x28e>
				case 2: max7219_display_no_decode(i, 0b0); break;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 fe18 	bl	8001c2c <max7219_display_no_decode>
 8000ffc:	e0b5      	b.n	800116a <state_p2wn+0x28e>
				case 3: max7219_display_no_decode(i, 0b0); break;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f000 fe11 	bl	8001c2c <max7219_display_no_decode>
 800100a:	e0ae      	b.n	800116a <state_p2wn+0x28e>
				case 4: max7219_display_no_decode(i, 0b0010101); break; 	//n
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2115      	movs	r1, #21
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fe0a 	bl	8001c2c <max7219_display_no_decode>
 8001018:	e0a7      	b.n	800116a <state_p2wn+0x28e>
				case 5: max7219_display_no_decode(i, 0b0010000); break; 	//i
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2110      	movs	r1, #16
 8001020:	4618      	mov	r0, r3
 8001022:	f000 fe03 	bl	8001c2c <max7219_display_no_decode>
 8001026:	e0a0      	b.n	800116a <state_p2wn+0x28e>
				case 6: max7219_display_no_decode(i, 0b0001101); break; 	//c
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	210d      	movs	r1, #13
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fdfc 	bl	8001c2c <max7219_display_no_decode>
 8001034:	e099      	b.n	800116a <state_p2wn+0x28e>
				case 7: max7219_display_no_decode(i, 0b1001111); break; 	//E
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	214f      	movs	r1, #79	; 0x4f
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fdf5 	bl	8001c2c <max7219_display_no_decode>
 8001042:	e092      	b.n	800116a <state_p2wn+0x28e>
				case 8: max7219_display_no_decode(i, 0b0); break; 			//
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fdee 	bl	8001c2c <max7219_display_no_decode>
 8001050:	e08b      	b.n	800116a <state_p2wn+0x28e>
				case 9: max7219_display_no_decode(i, 0b1100111); break; 	//P
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2167      	movs	r1, #103	; 0x67
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fde7 	bl	8001c2c <max7219_display_no_decode>
 800105e:	e084      	b.n	800116a <state_p2wn+0x28e>
				case 10: max7219_display_no_decode(i, 0b0001110); break;	//L
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	210e      	movs	r1, #14
 8001066:	4618      	mov	r0, r3
 8001068:	f000 fde0 	bl	8001c2c <max7219_display_no_decode>
 800106c:	e07d      	b.n	800116a <state_p2wn+0x28e>
				case 11: max7219_display_no_decode(i, 0b1110111); break;	//A
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2177      	movs	r1, #119	; 0x77
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fdd9 	bl	8001c2c <max7219_display_no_decode>
 800107a:	e076      	b.n	800116a <state_p2wn+0x28e>
				case 12: max7219_display_no_decode(i, 0b0100111); break;	//Y
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2127      	movs	r1, #39	; 0x27
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fdd2 	bl	8001c2c <max7219_display_no_decode>
 8001088:	e06f      	b.n	800116a <state_p2wn+0x28e>
				case 13: max7219_display_no_decode(i, 0b1001111); break;	//E
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	214f      	movs	r1, #79	; 0x4f
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fdcb 	bl	8001c2c <max7219_display_no_decode>
 8001096:	e068      	b.n	800116a <state_p2wn+0x28e>
				case 14: max7219_display_no_decode(i, 0b0000101); break;	//r
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2105      	movs	r1, #5
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fdc4 	bl	8001c2c <max7219_display_no_decode>
 80010a4:	e061      	b.n	800116a <state_p2wn+0x28e>
				case 15: max7219_display_no_decode(i, 0b0); break;			//
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fdbd 	bl	8001c2c <max7219_display_no_decode>
 80010b2:	e05a      	b.n	800116a <state_p2wn+0x28e>
				case 16: max7219_display_no_decode(i, 0b0110000); break;	//1
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2130      	movs	r1, #48	; 0x30
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fdb6 	bl	8001c2c <max7219_display_no_decode>
 80010c0:	e053      	b.n	800116a <state_p2wn+0x28e>
				case 17: max7219_display_no_decode(i, 0b0); break;			//
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 fdaf 	bl	8001c2c <max7219_display_no_decode>
 80010ce:	e04c      	b.n	800116a <state_p2wn+0x28e>
				case 18: max7219_display_no_decode(i, 0b0100111); break;	//Y
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2127      	movs	r1, #39	; 0x27
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fda8 	bl	8001c2c <max7219_display_no_decode>
 80010dc:	e045      	b.n	800116a <state_p2wn+0x28e>
				case 19: max7219_display_no_decode(i, 0b0000101); break;	//r
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2105      	movs	r1, #5
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 fda1 	bl	8001c2c <max7219_display_no_decode>
 80010ea:	e03e      	b.n	800116a <state_p2wn+0x28e>
				case 20: max7219_display_no_decode(i, 0b0); break;			//
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fd9a 	bl	8001c2c <max7219_display_no_decode>
 80010f8:	e037      	b.n	800116a <state_p2wn+0x28e>
				case 21: max7219_display_no_decode(i, 0b1001110); break;	//C
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	214e      	movs	r1, #78	; 0x4e
 8001100:	4618      	mov	r0, r3
 8001102:	f000 fd93 	bl	8001c2c <max7219_display_no_decode>
 8001106:	e030      	b.n	800116a <state_p2wn+0x28e>
				case 22: max7219_display_no_decode(i, 0b1111110); break;	//O
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	217e      	movs	r1, #126	; 0x7e
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fd8c 	bl	8001c2c <max7219_display_no_decode>
 8001114:	e029      	b.n	800116a <state_p2wn+0x28e>
				case 23: max7219_display_no_decode(i, 0b1111110); break;	//O
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	217e      	movs	r1, #126	; 0x7e
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fd85 	bl	8001c2c <max7219_display_no_decode>
 8001122:	e022      	b.n	800116a <state_p2wn+0x28e>
				case 24: max7219_display_no_decode(i, 0b0001110); break;	//L
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	210e      	movs	r1, #14
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fd7e 	bl	8001c2c <max7219_display_no_decode>
 8001130:	e01b      	b.n	800116a <state_p2wn+0x28e>
				case 25: max7219_display_no_decode(i, 0b0); break;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fd77 	bl	8001c2c <max7219_display_no_decode>
 800113e:	e014      	b.n	800116a <state_p2wn+0x28e>
				case 26: max7219_display_no_decode(i, 0b0); break;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fd70 	bl	8001c2c <max7219_display_no_decode>
 800114c:	e00d      	b.n	800116a <state_p2wn+0x28e>
				case 27: max7219_display_no_decode(i, 0b0); break;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f000 fd69 	bl	8001c2c <max7219_display_no_decode>
 800115a:	e006      	b.n	800116a <state_p2wn+0x28e>
				case 28: max7219_display_no_decode(i, 0b0); break;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f000 fd62 	bl	8001c2c <max7219_display_no_decode>
 8001168:	bf00      	nop
			for (int i=0;i<4;i++) {
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3301      	adds	r3, #1
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b03      	cmp	r3, #3
 8001174:	f77f aee8 	ble.w	8000f48 <state_p2wn+0x6c>
				}
			}
			shift_state++;
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <state_p2wn+0x2d4>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <state_p2wn+0x2d4>)
 8001182:	701a      	strb	r2, [r3, #0]

			if (shift_state+3 > 28)
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <state_p2wn+0x2d4>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b19      	cmp	r3, #25
 800118a:	d902      	bls.n	8001192 <state_p2wn+0x2b6>
				shift_state = 0;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <state_p2wn+0x2d4>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]

			//the buffer7 is actualised
			buffer7=fsm_handle->controllers.state_execution_count;
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <state_p2wn+0x2c8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	4a03      	ldr	r2, [pc, #12]	; (80011a8 <state_p2wn+0x2cc>)
 800119a:	6013      	str	r3, [r2, #0]
		/* 7SEGMENT END  ----------------------------------------------------------------------------------*/

	}

	/* ANIMATION END  ----------------------------------------------------------------------------------*/
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000090 	.word	0x20000090
 80011a8:	200000b0 	.word	0x200000b0
 80011ac:	00013880 	.word	0x00013880
 80011b0:	200000b4 	.word	0x200000b4

080011b4 <HAL_GPIO_EXTI_Callback>:

//button callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]

	//check the button pushed
	if (GPIO_Pin == BTN1_Pin) {
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011c4:	d106      	bne.n	80011d4 <HAL_GPIO_EXTI_Callback+0x20>

		//increment the push_nb of this button
		fsm_handle->inputs.nb_press_btn1++;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x40>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	7a1a      	ldrb	r2, [r3, #8]
 80011cc:	3201      	adds	r2, #1
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	721a      	strb	r2, [r3, #8]
	else if (GPIO_Pin == BTN2_Pin) {

		//increment the push_nb of this button
		fsm_handle->inputs.nb_press_btn2++;
	}
}
 80011d2:	e009      	b.n	80011e8 <HAL_GPIO_EXTI_Callback+0x34>
	else if (GPIO_Pin == BTN2_Pin) {
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011da:	d105      	bne.n	80011e8 <HAL_GPIO_EXTI_Callback+0x34>
		fsm_handle->inputs.nb_press_btn2++;
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	7a5a      	ldrb	r2, [r3, #9]
 80011e2:	3201      	adds	r2, #1
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	725a      	strb	r2, [r3, #9]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000090 	.word	0x20000090

080011f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b0b8      	sub	sp, #224	; 0xe0
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	TypeDef_LED_Array array_1 = {
 80011fe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
		(TypeDef_LED [8]){
 800120a:	4b2f      	ldr	r3, [pc, #188]	; (80012c8 <main+0xd0>)
 800120c:	f107 0494 	add.w	r4, r7, #148	; 0x94
 8001210:	461d      	mov	r5, r3
 8001212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001222:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	TypeDef_LED_Array array_1 = {
 8001226:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800122a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800122e:	2308      	movs	r3, #8
 8001230:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			{L7_GPIO_Port, L7_Pin},
			{L8_GPIO_Port, L8_Pin}},
		8
	};

	MAX7219_Handle_TypeDef max7219_handle = {
 8001234:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <main+0xd4>)
 8001246:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <main+0xd8>)
 800124c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001254:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8001258:	2304      	movs	r3, #4
 800125a:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			4,
	};

	TypeDef_Timer_Handler timer_handler;

	timer_handler.htim = &htim4;
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <main+0xdc>)
 8001260:	67fb      	str	r3, [r7, #124]	; 0x7c

	Pong_Handle_TypeDef pong_handler = {
 8001262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001266:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800126a:	ca07      	ldmia	r2, {r0, r1, r2}
 800126c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001270:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001274:	f107 0580 	add.w	r5, r7, #128	; 0x80
 8001278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800127a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800127c:	682b      	ldr	r3, [r5, #0]
 800127e:	6023      	str	r3, [r4, #0]
 8001280:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001284:	f107 0564 	add.w	r5, r7, #100	; 0x64
 8001288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001290:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001294:	f000 ff50 	bl	8002138 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001298:	f000 f820 	bl	80012dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800129c:	f000 f95c 	bl	8001558 <MX_GPIO_Init>
  MX_TIM3_Init();
 80012a0:	f000 f8a0 	bl	80013e4 <MX_TIM3_Init>
  MX_SPI1_Init();
 80012a4:	f000 f868 	bl	8001378 <MX_SPI1_Init>
  MX_TIM4_Init();
 80012a8:	f000 f8f2 	bl	8001490 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  ///////////////////////////////////////////////////////	PONG

  pong_init(&pong_handler, &fsm_handler);
 80012ac:	463a      	mov	r2, r7
 80012ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f91b 	bl	80004f0 <pong_init>

  ///////////////////////////////////////////////////////	MUSIC

  //init buzzer clock
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80012ba:	2104      	movs	r1, #4
 80012bc:	4806      	ldr	r0, [pc, #24]	; (80012d8 <main+0xe0>)
 80012be:	f002 fb41 	bl	8003944 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	pong_run();
 80012c2:	f7ff f979 	bl	80005b8 <pong_run>
 80012c6:	e7fc      	b.n	80012c2 <main+0xca>
 80012c8:	0800476c 	.word	0x0800476c
 80012cc:	200000b8 	.word	0x200000b8
 80012d0:	40020000 	.word	0x40020000
 80012d4:	20000150 	.word	0x20000150
 80012d8:	20000110 	.word	0x20000110

080012dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b092      	sub	sp, #72	; 0x48
 80012e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	2234      	movs	r2, #52	; 0x34
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 fa1e 	bl	800472c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f0:	463b      	mov	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <SystemClock_Config+0x98>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001306:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <SystemClock_Config+0x98>)
 8001308:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800130c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800130e:	2302      	movs	r3, #2
 8001310:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001312:	2301      	movs	r3, #1
 8001314:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001316:	2310      	movs	r3, #16
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131a:	2302      	movs	r3, #2
 800131c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800131e:	2300      	movs	r3, #0
 8001320:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001322:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001326:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001328:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800132c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4618      	mov	r0, r3
 8001334:	f001 f9d4 	bl	80026e0 <HAL_RCC_OscConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800133e:	f000 f994 	bl	800166a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001342:	230f      	movs	r3, #15
 8001344:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001346:	2303      	movs	r3, #3
 8001348:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001356:	463b      	mov	r3, r7
 8001358:	2101      	movs	r1, #1
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fcf0 	bl	8002d40 <HAL_RCC_ClockConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001366:	f000 f980 	bl	800166a <Error_Handler>
  }
}
 800136a:	bf00      	nop
 800136c:	3748      	adds	r7, #72	; 0x48
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40007000 	.word	0x40007000

08001378 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_SPI1_Init+0x64>)
 800137e:	4a18      	ldr	r2, [pc, #96]	; (80013e0 <MX_SPI1_Init+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_SPI1_Init+0x64>)
 8001384:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001388:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <MX_SPI1_Init+0x64>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <MX_SPI1_Init+0x64>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_SPI1_Init+0x64>)
 8001398:	2202      	movs	r2, #2
 800139a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <MX_SPI1_Init+0x64>)
 800139e:	2200      	movs	r2, #0
 80013a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_SPI1_Init+0x64>)
 80013a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_SPI1_Init+0x64>)
 80013ac:	2208      	movs	r2, #8
 80013ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <MX_SPI1_Init+0x64>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_SPI1_Init+0x64>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <MX_SPI1_Init+0x64>)
 80013be:	2200      	movs	r2, #0
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_SPI1_Init+0x64>)
 80013c4:	220a      	movs	r2, #10
 80013c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <MX_SPI1_Init+0x64>)
 80013ca:	f001 ff59 	bl	8003280 <HAL_SPI_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013d4:	f000 f949 	bl	800166a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200000b8 	.word	0x200000b8
 80013e0:	40013000 	.word	0x40013000

080013e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ea:	f107 0310 	add.w	r3, r7, #16
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f4:	463b      	mov	r3, r7
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001400:	4b21      	ldr	r3, [pc, #132]	; (8001488 <MX_TIM3_Init+0xa4>)
 8001402:	4a22      	ldr	r2, [pc, #136]	; (800148c <MX_TIM3_Init+0xa8>)
 8001404:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <MX_TIM3_Init+0xa4>)
 8001408:	2200      	movs	r2, #0
 800140a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140c:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <MX_TIM3_Init+0xa4>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <MX_TIM3_Init+0xa4>)
 8001414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001418:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141a:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <MX_TIM3_Init+0xa4>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <MX_TIM3_Init+0xa4>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001426:	4818      	ldr	r0, [pc, #96]	; (8001488 <MX_TIM3_Init+0xa4>)
 8001428:	f002 fa4c 	bl	80038c4 <HAL_TIM_PWM_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001432:	f000 f91a 	bl	800166a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	4619      	mov	r1, r3
 8001444:	4810      	ldr	r0, [pc, #64]	; (8001488 <MX_TIM3_Init+0xa4>)
 8001446:	f003 f885 	bl	8004554 <HAL_TIMEx_MasterConfigSynchronization>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001450:	f000 f90b 	bl	800166a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001454:	2360      	movs	r3, #96	; 0x60
 8001456:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145c:	2300      	movs	r3, #0
 800145e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001464:	463b      	mov	r3, r7
 8001466:	2204      	movs	r2, #4
 8001468:	4619      	mov	r1, r3
 800146a:	4807      	ldr	r0, [pc, #28]	; (8001488 <MX_TIM3_Init+0xa4>)
 800146c:	f002 fbdc 	bl	8003c28 <HAL_TIM_PWM_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001476:	f000 f8f8 	bl	800166a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800147a:	4803      	ldr	r0, [pc, #12]	; (8001488 <MX_TIM3_Init+0xa4>)
 800147c:	f000 f9b0 	bl	80017e0 <HAL_TIM_MspPostInit>

}
 8001480:	bf00      	nop
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000110 	.word	0x20000110
 800148c:	40000400 	.word	0x40000400

08001490 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08c      	sub	sp, #48	; 0x30
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001496:	f107 0320 	add.w	r3, r7, #32
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014bc:	4b24      	ldr	r3, [pc, #144]	; (8001550 <MX_TIM4_Init+0xc0>)
 80014be:	4a25      	ldr	r2, [pc, #148]	; (8001554 <MX_TIM4_Init+0xc4>)
 80014c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 31999;
 80014c2:	4b23      	ldr	r3, [pc, #140]	; (8001550 <MX_TIM4_Init+0xc0>)
 80014c4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80014c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <MX_TIM4_Init+0xc0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <MX_TIM4_Init+0xc0>)
 80014d2:	2263      	movs	r2, #99	; 0x63
 80014d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <MX_TIM4_Init+0xc0>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <MX_TIM4_Init+0xc0>)
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014e2:	481b      	ldr	r0, [pc, #108]	; (8001550 <MX_TIM4_Init+0xc0>)
 80014e4:	f002 f95c 	bl	80037a0 <HAL_TIM_Base_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80014ee:	f000 f8bc 	bl	800166a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014f8:	f107 0320 	add.w	r3, r7, #32
 80014fc:	4619      	mov	r1, r3
 80014fe:	4814      	ldr	r0, [pc, #80]	; (8001550 <MX_TIM4_Init+0xc0>)
 8001500:	f002 fc50 	bl	8003da4 <HAL_TIM_ConfigClockSource>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800150a:	f000 f8ae 	bl	800166a <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	4619      	mov	r1, r3
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <MX_TIM4_Init+0xc0>)
 800151e:	f002 fd05 	bl	8003f2c <HAL_TIM_SlaveConfigSynchro>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001528:	f000 f89f 	bl	800166a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	4619      	mov	r1, r3
 8001538:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_TIM4_Init+0xc0>)
 800153a:	f003 f80b 	bl	8004554 <HAL_TIMEx_MasterConfigSynchronization>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8001544:	f000 f891 	bl	800166a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	3730      	adds	r7, #48	; 0x30
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000150 	.word	0x20000150
 8001554:	40000800 	.word	0x40000800

08001558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <MX_GPIO_Init+0xe8>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	4a33      	ldr	r2, [pc, #204]	; (8001640 <MX_GPIO_Init+0xe8>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	61d3      	str	r3, [r2, #28]
 800157a:	4b31      	ldr	r3, [pc, #196]	; (8001640 <MX_GPIO_Init+0xe8>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	4b2e      	ldr	r3, [pc, #184]	; (8001640 <MX_GPIO_Init+0xe8>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a2d      	ldr	r2, [pc, #180]	; (8001640 <MX_GPIO_Init+0xe8>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	61d3      	str	r3, [r2, #28]
 8001592:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <MX_GPIO_Init+0xe8>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	4b28      	ldr	r3, [pc, #160]	; (8001640 <MX_GPIO_Init+0xe8>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a27      	ldr	r2, [pc, #156]	; (8001640 <MX_GPIO_Init+0xe8>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	61d3      	str	r3, [r2, #28]
 80015aa:	4b25      	ldr	r3, [pc, #148]	; (8001640 <MX_GPIO_Init+0xe8>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L1_Pin|L2_Pin|L3_Pin|L4_Pin
 80015b6:	2200      	movs	r2, #0
 80015b8:	f64f 4106 	movw	r1, #64518	; 0xfc06
 80015bc:	4821      	ldr	r0, [pc, #132]	; (8001644 <MX_GPIO_Init+0xec>)
 80015be:	f001 f85f 	bl	8002680 <HAL_GPIO_WritePin>
                          |L5_Pin|L6_Pin|L7_Pin|L8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80015c2:	2201      	movs	r2, #1
 80015c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c8:	481f      	ldr	r0, [pc, #124]	; (8001648 <MX_GPIO_Init+0xf0>)
 80015ca:	f001 f859 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L1_Pin L2_Pin L3_Pin L4_Pin
                           L5_Pin L6_Pin L7_Pin L8_Pin */
  GPIO_InitStruct.Pin = L1_Pin|L2_Pin|L3_Pin|L4_Pin
 80015ce:	f64f 4306 	movw	r3, #64518	; 0xfc06
 80015d2:	60fb      	str	r3, [r7, #12]
                          |L5_Pin|L6_Pin|L7_Pin|L8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	4619      	mov	r1, r3
 80015e6:	4817      	ldr	r0, [pc, #92]	; (8001644 <MX_GPIO_Init+0xec>)
 80015e8:	f000 feba 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80015ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f2:	2301      	movs	r3, #1
 80015f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f107 030c 	add.w	r3, r7, #12
 8001602:	4619      	mov	r1, r3
 8001604:	4810      	ldr	r0, [pc, #64]	; (8001648 <MX_GPIO_Init+0xf0>)
 8001606:	f000 feab 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 800160a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800160e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001610:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	4619      	mov	r1, r3
 8001620:	4809      	ldr	r0, [pc, #36]	; (8001648 <MX_GPIO_Init+0xf0>)
 8001622:	f000 fe9d 	bl	8002360 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	2028      	movs	r0, #40	; 0x28
 800162c:	f000 fe6d 	bl	800230a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001630:	2028      	movs	r0, #40	; 0x28
 8001632:	f000 fe86 	bl	8002342 <HAL_NVIC_EnableIRQ>

}
 8001636:	bf00      	nop
 8001638:	3720      	adds	r7, #32
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800
 8001644:	40020400 	.word	0x40020400
 8001648:	40020000 	.word	0x40020000

0800164c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800165c:	d101      	bne.n	8001662 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800165e:	f000 fd83 	bl	8002168 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800166e:	b672      	cpsid	i
}
 8001670:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001672:	e7fe      	b.n	8001672 <Error_Handler+0x8>

08001674 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_MspInit+0x58>)
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	4a13      	ldr	r2, [pc, #76]	; (80016cc <HAL_MspInit+0x58>)
 8001680:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001684:	6253      	str	r3, [r2, #36]	; 0x24
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_MspInit+0x58>)
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_MspInit+0x58>)
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	4a0d      	ldr	r2, [pc, #52]	; (80016cc <HAL_MspInit+0x58>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6213      	str	r3, [r2, #32]
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_MspInit+0x58>)
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_MspInit+0x58>)
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	4a07      	ldr	r2, [pc, #28]	; (80016cc <HAL_MspInit+0x58>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6253      	str	r3, [r2, #36]	; 0x24
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_MspInit+0x58>)
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	40023800 	.word	0x40023800

080016d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a17      	ldr	r2, [pc, #92]	; (800174c <HAL_SPI_MspInit+0x7c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d127      	bne.n	8001742 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_SPI_MspInit+0x80>)
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	4a16      	ldr	r2, [pc, #88]	; (8001750 <HAL_SPI_MspInit+0x80>)
 80016f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016fc:	6213      	str	r3, [r2, #32]
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <HAL_SPI_MspInit+0x80>)
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_SPI_MspInit+0x80>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	4a10      	ldr	r2, [pc, #64]	; (8001750 <HAL_SPI_MspInit+0x80>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	61d3      	str	r3, [r2, #28]
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_SPI_MspInit+0x80>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001722:	23a0      	movs	r3, #160	; 0xa0
 8001724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001732:	2305      	movs	r3, #5
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	; (8001754 <HAL_SPI_MspInit+0x84>)
 800173e:	f000 fe0f 	bl	8002360 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	; 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40013000 	.word	0x40013000
 8001750:	40023800 	.word	0x40023800
 8001754:	40020000 	.word	0x40020000

08001758 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a09      	ldr	r2, [pc, #36]	; (800178c <HAL_TIM_PWM_MspInit+0x34>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d10b      	bne.n	8001782 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_TIM_PWM_MspInit+0x38>)
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_TIM_PWM_MspInit+0x38>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6253      	str	r3, [r2, #36]	; 0x24
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_TIM_PWM_MspInit+0x38>)
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	40000400 	.word	0x40000400
 8001790:	40023800 	.word	0x40023800

08001794 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <HAL_TIM_Base_MspInit+0x44>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d113      	bne.n	80017ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <HAL_TIM_Base_MspInit+0x48>)
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	4a0c      	ldr	r2, [pc, #48]	; (80017dc <HAL_TIM_Base_MspInit+0x48>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6253      	str	r3, [r2, #36]	; 0x24
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_TIM_Base_MspInit+0x48>)
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	201e      	movs	r0, #30
 80017c4:	f000 fda1 	bl	800230a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017c8:	201e      	movs	r0, #30
 80017ca:	f000 fdba 	bl	8002342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40000800 	.word	0x40000800
 80017dc:	40023800 	.word	0x40023800

080017e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a11      	ldr	r2, [pc, #68]	; (8001844 <HAL_TIM_MspPostInit+0x64>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d11b      	bne.n	800183a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_TIM_MspPostInit+0x68>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4a10      	ldr	r2, [pc, #64]	; (8001848 <HAL_TIM_MspPostInit+0x68>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	61d3      	str	r3, [r2, #28]
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <HAL_TIM_MspPostInit+0x68>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800182a:	2302      	movs	r3, #2
 800182c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	; (800184c <HAL_TIM_MspPostInit+0x6c>)
 8001836:	f000 fd93 	bl	8002360 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800183a:	bf00      	nop
 800183c:	3720      	adds	r7, #32
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40000400 	.word	0x40000400
 8001848:	40023800 	.word	0x40023800
 800184c:	40020800 	.word	0x40020800

08001850 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08e      	sub	sp, #56	; 0x38
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001866:	4b33      	ldr	r3, [pc, #204]	; (8001934 <HAL_InitTick+0xe4>)
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	4a32      	ldr	r2, [pc, #200]	; (8001934 <HAL_InitTick+0xe4>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6253      	str	r3, [r2, #36]	; 0x24
 8001872:	4b30      	ldr	r3, [pc, #192]	; (8001934 <HAL_InitTick+0xe4>)
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800187e:	f107 0210 	add.w	r2, r7, #16
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f001 fc69 	bl	8003160 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001894:	2b00      	cmp	r3, #0
 8001896:	d103      	bne.n	80018a0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001898:	f001 fc4e 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 800189c:	6378      	str	r0, [r7, #52]	; 0x34
 800189e:	e004      	b.n	80018aa <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018a0:	f001 fc4a 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 80018a4:	4603      	mov	r3, r0
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ac:	4a22      	ldr	r2, [pc, #136]	; (8001938 <HAL_InitTick+0xe8>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	0c9b      	lsrs	r3, r3, #18
 80018b4:	3b01      	subs	r3, #1
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80018b8:	4b20      	ldr	r3, [pc, #128]	; (800193c <HAL_InitTick+0xec>)
 80018ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <HAL_InitTick+0xec>)
 80018c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018c6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80018c8:	4a1c      	ldr	r2, [pc, #112]	; (800193c <HAL_InitTick+0xec>)
 80018ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018cc:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80018ce:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_InitTick+0xec>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_InitTick+0xec>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <HAL_InitTick+0xec>)
 80018dc:	f001 ff60 	bl	80037a0 <HAL_TIM_Base_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80018e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d11b      	bne.n	8001926 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80018ee:	4813      	ldr	r0, [pc, #76]	; (800193c <HAL_InitTick+0xec>)
 80018f0:	f001 ff96 	bl	8003820 <HAL_TIM_Base_Start_IT>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80018fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d111      	bne.n	8001926 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001902:	201c      	movs	r0, #28
 8001904:	f000 fd1d 	bl	8002342 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b0f      	cmp	r3, #15
 800190c:	d808      	bhi.n	8001920 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800190e:	2200      	movs	r2, #0
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	201c      	movs	r0, #28
 8001914:	f000 fcf9 	bl	800230a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001918:	4a09      	ldr	r2, [pc, #36]	; (8001940 <HAL_InitTick+0xf0>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e002      	b.n	8001926 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001926:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800192a:	4618      	mov	r0, r3
 800192c:	3738      	adds	r7, #56	; 0x38
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800
 8001938:	431bde83 	.word	0x431bde83
 800193c:	20000190 	.word	0x20000190
 8001940:	20000068 	.word	0x20000068

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <NMI_Handler+0x4>

0800194a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <MemManage_Handler+0x4>

08001956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <UsageFault_Handler+0x4>

08001962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr

0800197a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr

08001986 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
	...

08001994 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <TIM2_IRQHandler+0x10>)
 800199a:	f002 f869 	bl	8003a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000190 	.word	0x20000190

080019a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <TIM4_IRQHandler+0x10>)
 80019ae:	f002 f85f 	bl	8003a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000150 	.word	0x20000150

080019bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 80019c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80019c4:	f000 fe74 	bl	80026b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 80019c8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019cc:	f000 fe70 	bl	80026b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e0:	480c      	ldr	r0, [pc, #48]	; (8001a14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019e2:	490d      	ldr	r1, [pc, #52]	; (8001a18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019e4:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019f8:	4c0a      	ldr	r4, [pc, #40]	; (8001a24 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a06:	f7ff ffe5 	bl	80019d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a0a:	f002 fe6b 	bl	80046e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a0e:	f7ff fbf3 	bl	80011f8 <main>
  bx lr
 8001a12:	4770      	bx	lr
  ldr r0, =_sdata
 8001a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a1c:	080047ec 	.word	0x080047ec
  ldr r2, =_sbss
 8001a20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a24:	200001e0 	.word	0x200001e0

08001a28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a28:	e7fe      	b.n	8001a28 <ADC1_IRQHandler>
	...

08001a2c <led_array_init>:
 * @brief Initialize LED array from parameters
 * @param _led_array Sructure containing LED array and array size
 * @retval HAL status
 */
HAL_StatusTypeDef led_array_init(TypeDef_LED_Array *_led_array)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	// Attribute led param
	led_array = _led_array;
 8001a34:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <led_array_init+0x30>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6013      	str	r3, [r2, #0]

	led_array->interrupt_state = 0;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <led_array_init+0x30>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	721a      	strb	r2, [r3, #8]

	CHECK_LED_PARAMS();
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <led_array_init+0x30>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <led_array_init+0x22>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <led_array_init+0x24>

	return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	200001d0 	.word	0x200001d0

08001a60 <write_array>:
 * 		- GPIO_PIN_SET
 * 		- GPIO_PIN_RESET
 * @retval HAL status
 */
HAL_StatusTypeDef write_array(int _led_index, GPIO_PinState _state)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	70fb      	strb	r3, [r7, #3]
	CHECK_LED_PARAMS();
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <write_array+0x5c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <write_array+0x18>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e01d      	b.n	8001ab4 <write_array+0x54>

	// Check led index
	if ((_led_index < 0) || (_led_index >= led_array->array_sz))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	db05      	blt.n	8001a8a <write_array+0x2a>
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <write_array+0x5c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d801      	bhi.n	8001a8e <write_array+0x2e>
		return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e012      	b.n	8001ab4 <write_array+0x54>

	// Write pin state to led index
	HAL_GPIO_WritePin(led_array->array[_led_index].port, led_array->array[_led_index].pin, _state);
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <write_array+0x5c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4413      	add	r3, r2
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <write_array+0x5c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	889b      	ldrh	r3, [r3, #4]
 8001aaa:	78fa      	ldrb	r2, [r7, #3]
 8001aac:	4619      	mov	r1, r3
 8001aae:	f000 fde7 	bl	8002680 <HAL_GPIO_WritePin>

	return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200001d0 	.word	0x200001d0

08001ac0 <clear_array>:

HAL_StatusTypeDef clear_array(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
	CHECK_LED_PARAMS();
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <clear_array+0x3c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <clear_array+0x12>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e010      	b.n	8001af4 <clear_array+0x34>

	// Clear LED array
	for (int i = 0; i < led_array->array_sz; i++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	e006      	b.n	8001ae6 <clear_array+0x26>
	{
		write_array(i, GPIO_PIN_RESET);
 8001ad8:	2100      	movs	r1, #0
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffc0 	bl	8001a60 <write_array>
	for (int i = 0; i < led_array->array_sz; i++)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <clear_array+0x3c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d8f2      	bhi.n	8001ad8 <clear_array+0x18>
	}

	return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200001d0 	.word	0x200001d0

08001b00 <max7219_transmit>:
 * @brief Send data to address
 * @param _address Address on 8 bits
 * @param _data Data on 8 bits
 */
static HAL_StatusTypeDef max7219_transmit(uint8_t _address, uint8_t _data)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	460a      	mov	r2, r1
 8001b0a:	71fb      	strb	r3, [r7, #7]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	71bb      	strb	r3, [r7, #6]
	uint8_t data[] = {_address, _data};				 // SPI transmit buffer
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	723b      	strb	r3, [r7, #8]
 8001b14:	79bb      	ldrb	r3, [r7, #6]
 8001b16:	727b      	strb	r3, [r7, #9]
	size_t data_sz = sizeof(data) / sizeof(uint8_t); // Size of SPI transmit buffer
 8001b18:	2302      	movs	r3, #2
 8001b1a:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef max7219_status = HAL_OK;		 // Return value
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	72fb      	strb	r3, [r7, #11]

	// Select MAX7219, send data, de-select MAX7219
	HAL_GPIO_WritePin(max7219_handle->spi_ncs_port, max7219_handle->spi_ncs_pin, GPIO_PIN_RESET);
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <max7219_transmit+0x6c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6858      	ldr	r0, [r3, #4]
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <max7219_transmit+0x6c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	891b      	ldrh	r3, [r3, #8]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f000 fda6 	bl	8002680 <HAL_GPIO_WritePin>
	max7219_status = HAL_SPI_Transmit(max7219_handle->hspi, data, data_sz, 100);
 8001b34:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <max7219_transmit+0x6c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	f107 0108 	add.w	r1, r7, #8
 8001b42:	2364      	movs	r3, #100	; 0x64
 8001b44:	f001 fc25 	bl	8003392 <HAL_SPI_Transmit>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(max7219_handle->spi_ncs_port, max7219_handle->spi_ncs_pin, GPIO_PIN_SET);
 8001b4c:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <max7219_transmit+0x6c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6858      	ldr	r0, [r3, #4]
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <max7219_transmit+0x6c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	891b      	ldrh	r3, [r3, #8]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f000 fd90 	bl	8002680 <HAL_GPIO_WritePin>

	// Return transmit status
	return max7219_status;
 8001b60:	7afb      	ldrb	r3, [r7, #11]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200001d4 	.word	0x200001d4

08001b70 <max7219_init>:
 * also initializes basic functions of MAX7219
 * @param _max_7219_handle Pointer to MAX7219 handle
 *
 */
HAL_StatusTypeDef max7219_init(MAX7219_Handle_TypeDef *_max_7219_handle)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	/* Attribute parameters to static variables */
	max7219_handle = _max_7219_handle;
 8001b78:	4a2b      	ldr	r2, [pc, #172]	; (8001c28 <max7219_init+0xb8>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6013      	str	r3, [r2, #0]

	CHECK_MAX7219_PARAMS();
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <max7219_init+0xb8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d104      	bne.n	8001b90 <max7219_init+0x20>
 8001b86:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <max7219_init+0xb8>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e047      	b.n	8001c20 <max7219_init+0xb0>

	/* Initialize MAX7219 following datasheet */
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	73fb      	strb	r3, [r7, #15]

	// Shutdown MAX7219 to reset configuration
	max7219_status = max7219_transmit(SHUTDOWN_REG_BASE, SHUTDOWN_REG_SHUTDOWN_MODE);
 8001b94:	2100      	movs	r1, #0
 8001b96:	200c      	movs	r0, #12
 8001b98:	f7ff ffb2 	bl	8001b00 <max7219_transmit>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <max7219_init+0x3a>
		return max7219_status;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	e03a      	b.n	8001c20 <max7219_init+0xb0>

	// Enable MAX7219
	max7219_status = max7219_transmit(SHUTDOWN_REG_BASE, SHUTDOWN_REG_NORMAL_MODE);
 8001baa:	2101      	movs	r1, #1
 8001bac:	200c      	movs	r0, #12
 8001bae:	f7ff ffa7 	bl	8001b00 <max7219_transmit>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <max7219_init+0x50>
		return max7219_status;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	e02f      	b.n	8001c20 <max7219_init+0xb0>

	// Set scan limit to number of digits
	max7219_status = max7219_transmit(SCAN_LIMIT_REGG_BASE, max7219_handle->digits_count - 1);
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <max7219_init+0xb8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	7a9b      	ldrb	r3, [r3, #10]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	4619      	mov	r1, r3
 8001bcc:	200b      	movs	r0, #11
 8001bce:	f7ff ff97 	bl	8001b00 <max7219_transmit>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <max7219_init+0x70>
		return max7219_status;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	e01f      	b.n	8001c20 <max7219_init+0xb0>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 8001be0:	2100      	movs	r1, #0
 8001be2:	2009      	movs	r0, #9
 8001be4:	f7ff ff8c 	bl	8001b00 <max7219_transmit>
 8001be8:	4603      	mov	r3, r0
 8001bea:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <max7219_init+0x86>
		return max7219_status;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	e014      	b.n	8001c20 <max7219_init+0xb0>

	// Set brightness to middle value
	max7219_status = max7219_transmit(INTENSITY_REG_BASE, 0x08);
 8001bf6:	2108      	movs	r1, #8
 8001bf8:	200a      	movs	r0, #10
 8001bfa:	f7ff ff81 	bl	8001b00 <max7219_transmit>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <max7219_init+0x9c>
		return max7219_status;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	e009      	b.n	8001c20 <max7219_init+0xb0>

	// Erase all digits
	max7219_status = max7219_erase_no_decode();
 8001c0c:	f000 f84c 	bl	8001ca8 <max7219_erase_no_decode>
 8001c10:	4603      	mov	r3, r0
 8001c12:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <max7219_init+0xae>
		return max7219_status;
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	e000      	b.n	8001c20 <max7219_init+0xb0>

	// Return on success
	return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200001d4 	.word	0x200001d4

08001c2c <max7219_display_no_decode>:
 * @param _digit_index 7 segment digit index (starts at 0)
 * @param _digit_value Desired digit value to be written
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_display_no_decode(uint8_t _digit_index, uint8_t _digit_value)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	460a      	mov	r2, r1
 8001c36:	71fb      	strb	r3, [r7, #7]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	73fb      	strb	r3, [r7, #15]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 8001c40:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <max7219_display_no_decode+0x74>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d104      	bne.n	8001c52 <max7219_display_no_decode+0x26>
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <max7219_display_no_decode+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e022      	b.n	8001c98 <max7219_display_no_decode+0x6c>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 8001c52:	2100      	movs	r1, #0
 8001c54:	2009      	movs	r0, #9
 8001c56:	f7ff ff53 	bl	8001b00 <max7219_transmit>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <max7219_display_no_decode+0x3c>
		return max7219_status;
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	e017      	b.n	8001c98 <max7219_display_no_decode+0x6c>

	/* Check if digit index does not overflow actual hardware setup */
	if (_digit_index > max7219_handle->digits_count)
 8001c68:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <max7219_display_no_decode+0x74>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	7a9b      	ldrb	r3, [r3, #10]
 8001c6e:	79fa      	ldrb	r2, [r7, #7]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d901      	bls.n	8001c78 <max7219_display_no_decode+0x4c>
		return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e00f      	b.n	8001c98 <max7219_display_no_decode+0x6c>

	// Display value
	max7219_status = max7219_transmit(digits_registers[_digit_index], _digit_value);
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <max7219_display_no_decode+0x78>)
 8001c7c:	5cd3      	ldrb	r3, [r2, r3]
 8001c7e:	79ba      	ldrb	r2, [r7, #6]
 8001c80:	4611      	mov	r1, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff3c 	bl	8001b00 <max7219_transmit>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <max7219_display_no_decode+0x6a>
		return max7219_status;
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	e000      	b.n	8001c98 <max7219_display_no_decode+0x6c>

	return max7219_status;
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200001d4 	.word	0x200001d4
 8001ca4:	2000005c 	.word	0x2000005c

08001ca8 <max7219_erase_no_decode>:
/**
 * @brief Erase display
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_erase_no_decode(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	71fb      	strb	r3, [r7, #7]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <max7219_erase_no_decode+0x74>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d104      	bne.n	8001cc4 <max7219_erase_no_decode+0x1c>
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <max7219_erase_no_decode+0x74>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e027      	b.n	8001d14 <max7219_erase_no_decode+0x6c>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2009      	movs	r0, #9
 8001cc8:	f7ff ff1a 	bl	8001b00 <max7219_transmit>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <max7219_erase_no_decode+0x32>
		return max7219_status;
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	e01c      	b.n	8001d14 <max7219_erase_no_decode+0x6c>

	for (int i = 0; i < max7219_handle->digits_count; i++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	e011      	b.n	8001d04 <max7219_erase_no_decode+0x5c>
	{
		max7219_status = max7219_transmit(digits_registers[i], DIGIT_OFF);
 8001ce0:	4a0f      	ldr	r2, [pc, #60]	; (8001d20 <max7219_erase_no_decode+0x78>)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff08 	bl	8001b00 <max7219_transmit>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <max7219_erase_no_decode+0x56>
			return max7219_status;
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	e00a      	b.n	8001d14 <max7219_erase_no_decode+0x6c>
	for (int i = 0; i < max7219_handle->digits_count; i++)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	3301      	adds	r3, #1
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <max7219_erase_no_decode+0x74>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	7a9b      	ldrb	r3, [r3, #10]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	dbe6      	blt.n	8001ce0 <max7219_erase_no_decode+0x38>
	}

	return max7219_status;
 8001d12:	79fb      	ldrb	r3, [r7, #7]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	200001d4 	.word	0x200001d4
 8001d20:	2000005c 	.word	0x2000005c

08001d24 <max7219_erase_decode>:
/**
 * @brief Erase display
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_erase_decode(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	71fb      	strb	r3, [r7, #7]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <max7219_erase_decode+0x74>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d104      	bne.n	8001d40 <max7219_erase_decode+0x1c>
 8001d36:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <max7219_erase_decode+0x74>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e027      	b.n	8001d90 <max7219_erase_decode+0x6c>

	// Set decode mode to 'decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0xFF);
 8001d40:	21ff      	movs	r1, #255	; 0xff
 8001d42:	2009      	movs	r0, #9
 8001d44:	f7ff fedc 	bl	8001b00 <max7219_transmit>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <max7219_erase_decode+0x32>
		return max7219_status;
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	e01c      	b.n	8001d90 <max7219_erase_decode+0x6c>

	for (int i = 0; i < max7219_handle->digits_count; i++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	603b      	str	r3, [r7, #0]
 8001d5a:	e011      	b.n	8001d80 <max7219_erase_decode+0x5c>
	{
		max7219_status = max7219_transmit(digits_registers[i], DIGIT_OFF_DECODE);
 8001d5c:	4a0f      	ldr	r2, [pc, #60]	; (8001d9c <max7219_erase_decode+0x78>)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	4413      	add	r3, r2
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	217f      	movs	r1, #127	; 0x7f
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff feca 	bl	8001b00 <max7219_transmit>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <max7219_erase_decode+0x56>
			return max7219_status;
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	e00a      	b.n	8001d90 <max7219_erase_decode+0x6c>
	for (int i = 0; i < max7219_handle->digits_count; i++)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <max7219_erase_decode+0x74>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	7a9b      	ldrb	r3, [r3, #10]
 8001d86:	461a      	mov	r2, r3
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	dbe6      	blt.n	8001d5c <max7219_erase_decode+0x38>
	}

	return max7219_status;
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	200001d4 	.word	0x200001d4
 8001d9c:	2000005c 	.word	0x2000005c

08001da0 <set_7segment>:
 * @param _message The message to be displayed on the 7-segment display.
 * @param _is_blinking 0 = no blinking, 1 = blinking, 2 = blinking with a dot
 * 
 * @return HAL_OK
 */
HAL_StatusTypeDef set_7segment(char * _message, uint8_t _is_blinking) {
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	70fb      	strb	r3, [r7, #3]

	if (sizeof(_message)/sizeof(char*) > 4 || _is_blinking > 2)
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <set_7segment+0x16>
		return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e008      	b.n	8001dc8 <set_7segment+0x28>

	max7219_handle->message = _message;
 8001db6:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <set_7segment+0x34>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	60da      	str	r2, [r3, #12]
	max7219_handle->is_blinking = _is_blinking;
 8001dbe:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <set_7segment+0x34>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	78fa      	ldrb	r2, [r7, #3]
 8001dc4:	741a      	strb	r2, [r3, #16]

	return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	200001d4 	.word	0x200001d4

08001dd8 <callback_display>:

/**
 * If the display is not blinking, display the message. If the display is blinking, display nothing
 * this function is called by the interrupt function
 */
void callback_display(void) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	static uint8_t display_state = 1;

	if (display_state == 1) {
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <callback_display+0x40>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d10e      	bne.n	8001e02 <callback_display+0x2a>
		display_on_7segments(max7219_handle->message);
 8001de4:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <callback_display+0x44>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f818 	bl	8001e20 <display_on_7segments>

		if (max7219_handle->is_blinking == 1)
 8001df0:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <callback_display+0x44>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	7c1b      	ldrb	r3, [r3, #16]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d10c      	bne.n	8001e14 <callback_display+0x3c>
			display_state =0;
 8001dfa:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <callback_display+0x40>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
	}
	else if (display_state == 0) {
		max7219_erase_no_decode();
		display_state = 1;
	}
}
 8001e00:	e008      	b.n	8001e14 <callback_display+0x3c>
	else if (display_state == 0) {
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <callback_display+0x40>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d104      	bne.n	8001e14 <callback_display+0x3c>
		max7219_erase_no_decode();
 8001e0a:	f7ff ff4d 	bl	8001ca8 <max7219_erase_no_decode>
		display_state = 1;
 8001e0e:	4b02      	ldr	r3, [pc, #8]	; (8001e18 <callback_display+0x40>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000064 	.word	0x20000064
 8001e1c:	200001d4 	.word	0x200001d4

08001e20 <display_on_7segments>:
 * 
 * @param _message The message to display.
 * 
 * @return The HAL_StatusTypeDef is a variable that is returned by the function.
 */
HAL_StatusTypeDef display_on_7segments(char * _message) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	if (sizeof(_message)/sizeof(char*) > 4)
			return HAL_ERROR;

	max7219_erase_no_decode();
 8001e28:	f7ff ff3e 	bl	8001ca8 <max7219_erase_no_decode>

	for (int i=0;i<max7219_handle->digits_count;i++) {
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	e172      	b.n	8002118 <display_on_7segments+0x2f8>
		switch ((int) _message[i]) {
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	3b30      	subs	r3, #48	; 0x30
 8001e3c:	2b49      	cmp	r3, #73	; 0x49
 8001e3e:	f200 8162 	bhi.w	8002106 <display_on_7segments+0x2e6>
 8001e42:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <display_on_7segments+0x28>)
 8001e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e48:	08001f71 	.word	0x08001f71
 8001e4c:	08001f7f 	.word	0x08001f7f
 8001e50:	08001f8d 	.word	0x08001f8d
 8001e54:	08001f9b 	.word	0x08001f9b
 8001e58:	08001fa9 	.word	0x08001fa9
 8001e5c:	08001fb7 	.word	0x08001fb7
 8001e60:	08001fc5 	.word	0x08001fc5
 8001e64:	08001fd3 	.word	0x08001fd3
 8001e68:	08001fe1 	.word	0x08001fe1
 8001e6c:	08001fef 	.word	0x08001fef
 8001e70:	08002107 	.word	0x08002107
 8001e74:	08002107 	.word	0x08002107
 8001e78:	08002107 	.word	0x08002107
 8001e7c:	08002107 	.word	0x08002107
 8001e80:	08002107 	.word	0x08002107
 8001e84:	08002107 	.word	0x08002107
 8001e88:	08002107 	.word	0x08002107
 8001e8c:	08001ffd 	.word	0x08001ffd
 8001e90:	0800200b 	.word	0x0800200b
 8001e94:	08002019 	.word	0x08002019
 8001e98:	08002107 	.word	0x08002107
 8001e9c:	08002027 	.word	0x08002027
 8001ea0:	08002035 	.word	0x08002035
 8001ea4:	08002043 	.word	0x08002043
 8001ea8:	08002051 	.word	0x08002051
 8001eac:	0800205f 	.word	0x0800205f
 8001eb0:	0800206d 	.word	0x0800206d
 8001eb4:	08002107 	.word	0x08002107
 8001eb8:	0800207b 	.word	0x0800207b
 8001ebc:	08002107 	.word	0x08002107
 8001ec0:	08002089 	.word	0x08002089
 8001ec4:	08002097 	.word	0x08002097
 8001ec8:	080020a5 	.word	0x080020a5
 8001ecc:	080020b3 	.word	0x080020b3
 8001ed0:	080020c1 	.word	0x080020c1
 8001ed4:	080020cf 	.word	0x080020cf
 8001ed8:	080020dd 	.word	0x080020dd
 8001edc:	080020eb 	.word	0x080020eb
 8001ee0:	08002107 	.word	0x08002107
 8001ee4:	08002107 	.word	0x08002107
 8001ee8:	08002107 	.word	0x08002107
 8001eec:	080020f9 	.word	0x080020f9
 8001ef0:	08002107 	.word	0x08002107
 8001ef4:	08002107 	.word	0x08002107
 8001ef8:	08002107 	.word	0x08002107
 8001efc:	08002107 	.word	0x08002107
 8001f00:	08002107 	.word	0x08002107
 8001f04:	08002107 	.word	0x08002107
 8001f08:	08002107 	.word	0x08002107
 8001f0c:	08001ffd 	.word	0x08001ffd
 8001f10:	0800200b 	.word	0x0800200b
 8001f14:	08002019 	.word	0x08002019
 8001f18:	08002107 	.word	0x08002107
 8001f1c:	08002027 	.word	0x08002027
 8001f20:	08002035 	.word	0x08002035
 8001f24:	08002043 	.word	0x08002043
 8001f28:	08002051 	.word	0x08002051
 8001f2c:	0800205f 	.word	0x0800205f
 8001f30:	0800206d 	.word	0x0800206d
 8001f34:	08002107 	.word	0x08002107
 8001f38:	0800207b 	.word	0x0800207b
 8001f3c:	08002107 	.word	0x08002107
 8001f40:	08002089 	.word	0x08002089
 8001f44:	08002097 	.word	0x08002097
 8001f48:	080020a5 	.word	0x080020a5
 8001f4c:	080020b3 	.word	0x080020b3
 8001f50:	080020c1 	.word	0x080020c1
 8001f54:	080020cf 	.word	0x080020cf
 8001f58:	080020dd 	.word	0x080020dd
 8001f5c:	080020eb 	.word	0x080020eb
 8001f60:	08002107 	.word	0x08002107
 8001f64:	08002107 	.word	0x08002107
 8001f68:	08002107 	.word	0x08002107
 8001f6c:	080020f9 	.word	0x080020f9
		case 48: max7219_display_no_decode(i, 0b1111110); break; //0
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	217e      	movs	r1, #126	; 0x7e
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fe58 	bl	8001c2c <max7219_display_no_decode>
 8001f7c:	e0c9      	b.n	8002112 <display_on_7segments+0x2f2>
		case 49: max7219_display_no_decode(i, 0b0110000); break; //1
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2130      	movs	r1, #48	; 0x30
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fe51 	bl	8001c2c <max7219_display_no_decode>
 8001f8a:	e0c2      	b.n	8002112 <display_on_7segments+0x2f2>
		case 50: max7219_display_no_decode(i, 0b1101101); break; //2
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	216d      	movs	r1, #109	; 0x6d
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fe4a 	bl	8001c2c <max7219_display_no_decode>
 8001f98:	e0bb      	b.n	8002112 <display_on_7segments+0x2f2>
		case 51: max7219_display_no_decode(i, 0b1111001); break; //3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2179      	movs	r1, #121	; 0x79
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fe43 	bl	8001c2c <max7219_display_no_decode>
 8001fa6:	e0b4      	b.n	8002112 <display_on_7segments+0x2f2>
		case 52: max7219_display_no_decode(i, 0b0110011); break; //4
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2133      	movs	r1, #51	; 0x33
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fe3c 	bl	8001c2c <max7219_display_no_decode>
 8001fb4:	e0ad      	b.n	8002112 <display_on_7segments+0x2f2>
		case 53: max7219_display_no_decode(i, 0b1011011); break; //5
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	215b      	movs	r1, #91	; 0x5b
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fe35 	bl	8001c2c <max7219_display_no_decode>
 8001fc2:	e0a6      	b.n	8002112 <display_on_7segments+0x2f2>
		case 54: max7219_display_no_decode(i, 0b1011111); break; //6
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	215f      	movs	r1, #95	; 0x5f
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fe2e 	bl	8001c2c <max7219_display_no_decode>
 8001fd0:	e09f      	b.n	8002112 <display_on_7segments+0x2f2>
		case 55: max7219_display_no_decode(i, 0b1110000); break; //7
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2170      	movs	r1, #112	; 0x70
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fe27 	bl	8001c2c <max7219_display_no_decode>
 8001fde:	e098      	b.n	8002112 <display_on_7segments+0x2f2>
		case 56: max7219_display_no_decode(i, 0b1111111); break; //8
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	217f      	movs	r1, #127	; 0x7f
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fe20 	bl	8001c2c <max7219_display_no_decode>
 8001fec:	e091      	b.n	8002112 <display_on_7segments+0x2f2>
		case 57: max7219_display_no_decode(i, 0b1111011); break; //9
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	217b      	movs	r1, #123	; 0x7b
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fe19 	bl	8001c2c <max7219_display_no_decode>
 8001ffa:	e08a      	b.n	8002112 <display_on_7segments+0x2f2>
		case 65: case 97: max7219_display_no_decode(i, 0b1110111); break; //a
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2177      	movs	r1, #119	; 0x77
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fe12 	bl	8001c2c <max7219_display_no_decode>
 8002008:	e083      	b.n	8002112 <display_on_7segments+0x2f2>
		case 66: case 98: max7219_display_no_decode(i, 0b1111111); break; //b
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	217f      	movs	r1, #127	; 0x7f
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fe0b 	bl	8001c2c <max7219_display_no_decode>
 8002016:	e07c      	b.n	8002112 <display_on_7segments+0x2f2>
		case 67: case 99: max7219_display_no_decode(i, 0b1001110); break; //c
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	214e      	movs	r1, #78	; 0x4e
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fe04 	bl	8001c2c <max7219_display_no_decode>
 8002024:	e075      	b.n	8002112 <display_on_7segments+0x2f2>
		case 69: case 101: max7219_display_no_decode(i, 0b1001111); break; //e
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	b2db      	uxtb	r3, r3
 800202a:	214f      	movs	r1, #79	; 0x4f
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fdfd 	bl	8001c2c <max7219_display_no_decode>
 8002032:	e06e      	b.n	8002112 <display_on_7segments+0x2f2>
		case 70: case 102: max7219_display_no_decode(i, 0b1000111); break; //f
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2147      	movs	r1, #71	; 0x47
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fdf6 	bl	8001c2c <max7219_display_no_decode>
 8002040:	e067      	b.n	8002112 <display_on_7segments+0x2f2>
		case 71: case 103: max7219_display_no_decode(i, 0b1011111); break; //g
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	215f      	movs	r1, #95	; 0x5f
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fdef 	bl	8001c2c <max7219_display_no_decode>
 800204e:	e060      	b.n	8002112 <display_on_7segments+0x2f2>
		case 72: case 104: max7219_display_no_decode(i, 0b0110111); break; //h
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2137      	movs	r1, #55	; 0x37
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fde8 	bl	8001c2c <max7219_display_no_decode>
 800205c:	e059      	b.n	8002112 <display_on_7segments+0x2f2>
		case 73: case 105: max7219_display_no_decode(i, 0b0110000); break; //i
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2130      	movs	r1, #48	; 0x30
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fde1 	bl	8001c2c <max7219_display_no_decode>
 800206a:	e052      	b.n	8002112 <display_on_7segments+0x2f2>
		case 74: case 106: max7219_display_no_decode(i, 0b1111101); break; //j
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	217d      	movs	r1, #125	; 0x7d
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fdda 	bl	8001c2c <max7219_display_no_decode>
 8002078:	e04b      	b.n	8002112 <display_on_7segments+0x2f2>
		case 76: case 108: max7219_display_no_decode(i, 0b0001110); break; //l
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	210e      	movs	r1, #14
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fdd3 	bl	8001c2c <max7219_display_no_decode>
 8002086:	e044      	b.n	8002112 <display_on_7segments+0x2f2>
		case 78: case 110: max7219_display_no_decode(i, 0b0010101); break; //n
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2115      	movs	r1, #21
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fdcc 	bl	8001c2c <max7219_display_no_decode>
 8002094:	e03d      	b.n	8002112 <display_on_7segments+0x2f2>
		case 79: case 111: max7219_display_no_decode(i, 0b1111110); break; //o
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	217e      	movs	r1, #126	; 0x7e
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fdc5 	bl	8001c2c <max7219_display_no_decode>
 80020a2:	e036      	b.n	8002112 <display_on_7segments+0x2f2>
		case 80: case 112: max7219_display_no_decode(i, 0b1100111); break; //p
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2167      	movs	r1, #103	; 0x67
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fdbe 	bl	8001c2c <max7219_display_no_decode>
 80020b0:	e02f      	b.n	8002112 <display_on_7segments+0x2f2>
		case 81: case 113: max7219_display_no_decode(i, 0b1110011); break; //q
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2173      	movs	r1, #115	; 0x73
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fdb7 	bl	8001c2c <max7219_display_no_decode>
 80020be:	e028      	b.n	8002112 <display_on_7segments+0x2f2>
		case 82: case 114: max7219_display_no_decode(i, 0b0000101); break; //r
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2105      	movs	r1, #5
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fdb0 	bl	8001c2c <max7219_display_no_decode>
 80020cc:	e021      	b.n	8002112 <display_on_7segments+0x2f2>
		case 83: case 115: max7219_display_no_decode(i, 0b1011011); break; //s
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	215b      	movs	r1, #91	; 0x5b
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fda9 	bl	8001c2c <max7219_display_no_decode>
 80020da:	e01a      	b.n	8002112 <display_on_7segments+0x2f2>
		case 84: case 116: max7219_display_no_decode(i, 0b0001111); break; //t
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	210f      	movs	r1, #15
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fda2 	bl	8001c2c <max7219_display_no_decode>
 80020e8:	e013      	b.n	8002112 <display_on_7segments+0x2f2>
		case 85: case 117: max7219_display_no_decode(i, 0b0111110); break; //u
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	213e      	movs	r1, #62	; 0x3e
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fd9b 	bl	8001c2c <max7219_display_no_decode>
 80020f6:	e00c      	b.n	8002112 <display_on_7segments+0x2f2>
		case 89: case 121: max7219_display_no_decode(i, 0b0100111); break; //y
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2127      	movs	r1, #39	; 0x27
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fd94 	bl	8001c2c <max7219_display_no_decode>
 8002104:	e005      	b.n	8002112 <display_on_7segments+0x2f2>
		default : max7219_display_no_decode(i, 0b0);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fd8d 	bl	8001c2c <max7219_display_no_decode>
	for (int i=0;i<max7219_handle->digits_count;i++) {
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	3301      	adds	r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <display_on_7segments+0x314>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	7a9b      	ldrb	r3, [r3, #10]
 800211e:	461a      	mov	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4293      	cmp	r3, r2
 8002124:	f6ff ae85 	blt.w	8001e32 <display_on_7segments+0x12>
		 * D, K, M, V, W, X, Z
		 * Sorry :/
		 */
		}
	}
	return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200001d4 	.word	0x200001d4

08002138 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002142:	2003      	movs	r0, #3
 8002144:	f000 f8d6 	bl	80022f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002148:	200f      	movs	r0, #15
 800214a:	f7ff fb81 	bl	8001850 <HAL_InitTick>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	71fb      	strb	r3, [r7, #7]
 8002158:	e001      	b.n	800215e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800215a:	f7ff fa8b 	bl	8001674 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800215e:	79fb      	ldrb	r3, [r7, #7]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_IncTick+0x1c>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_IncTick+0x20>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4413      	add	r3, r2
 8002176:	4a03      	ldr	r2, [pc, #12]	; (8002184 <HAL_IncTick+0x1c>)
 8002178:	6013      	str	r3, [r2, #0]
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	200001d8 	.word	0x200001d8
 8002188:	2000006c 	.word	0x2000006c

0800218c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return uwTick;
 8002190:	4b02      	ldr	r3, [pc, #8]	; (800219c <HAL_GetTick+0x10>)
 8002192:	681b      	ldr	r3, [r3, #0]
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	200001d8 	.word	0x200001d8

080021a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d2:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	60d3      	str	r3, [r2, #12]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ec:	4b04      	ldr	r3, [pc, #16]	; (8002200 <__NVIC_GetPriorityGrouping+0x18>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	f003 0307 	and.w	r3, r3, #7
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	2b00      	cmp	r3, #0
 8002214:	db0b      	blt.n	800222e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	f003 021f 	and.w	r2, r3, #31
 800221c:	4906      	ldr	r1, [pc, #24]	; (8002238 <__NVIC_EnableIRQ+0x34>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2001      	movs	r0, #1
 8002226:	fa00 f202 	lsl.w	r2, r0, r2
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	e000e100 	.word	0xe000e100

0800223c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	6039      	str	r1, [r7, #0]
 8002246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224c:	2b00      	cmp	r3, #0
 800224e:	db0a      	blt.n	8002266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	490c      	ldr	r1, [pc, #48]	; (8002288 <__NVIC_SetPriority+0x4c>)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	0112      	lsls	r2, r2, #4
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	440b      	add	r3, r1
 8002260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002264:	e00a      	b.n	800227c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4908      	ldr	r1, [pc, #32]	; (800228c <__NVIC_SetPriority+0x50>)
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	3b04      	subs	r3, #4
 8002274:	0112      	lsls	r2, r2, #4
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	440b      	add	r3, r1
 800227a:	761a      	strb	r2, [r3, #24]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000e100 	.word	0xe000e100
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f1c3 0307 	rsb	r3, r3, #7
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	bf28      	it	cs
 80022ae:	2304      	movcs	r3, #4
 80022b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3304      	adds	r3, #4
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	d902      	bls.n	80022c0 <NVIC_EncodePriority+0x30>
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3b03      	subs	r3, #3
 80022be:	e000      	b.n	80022c2 <NVIC_EncodePriority+0x32>
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c4:	f04f 32ff 	mov.w	r2, #4294967295
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43da      	mvns	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	401a      	ands	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d8:	f04f 31ff 	mov.w	r1, #4294967295
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	fa01 f303 	lsl.w	r3, r1, r3
 80022e2:	43d9      	mvns	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	4313      	orrs	r3, r2
         );
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3724      	adds	r7, #36	; 0x24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ff4f 	bl	80021a0 <__NVIC_SetPriorityGrouping>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800231c:	f7ff ff64 	bl	80021e8 <__NVIC_GetPriorityGrouping>
 8002320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	6978      	ldr	r0, [r7, #20]
 8002328:	f7ff ffb2 	bl	8002290 <NVIC_EncodePriority>
 800232c:	4602      	mov	r2, r0
 800232e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff81 	bl	800223c <__NVIC_SetPriority>
}
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	4603      	mov	r3, r0
 800234a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800234c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff57 	bl	8002204 <__NVIC_EnableIRQ>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002360:	b480      	push	{r7}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002376:	e160      	b.n	800263a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	2101      	movs	r1, #1
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	fa01 f303 	lsl.w	r3, r1, r3
 8002384:	4013      	ands	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 8152 	beq.w	8002634 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b01      	cmp	r3, #1
 800239a:	d005      	beq.n	80023a8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d130      	bne.n	800240a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	2203      	movs	r2, #3
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80023de:	2201      	movs	r2, #1
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	f003 0201 	and.w	r2, r3, #1
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b03      	cmp	r3, #3
 8002414:	d017      	beq.n	8002446 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d123      	bne.n	800249a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	08da      	lsrs	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3208      	adds	r2, #8
 800245a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	220f      	movs	r2, #15
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	08da      	lsrs	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3208      	adds	r2, #8
 8002494:	6939      	ldr	r1, [r7, #16]
 8002496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2203      	movs	r2, #3
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0203 	and.w	r2, r3, #3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 80ac 	beq.w	8002634 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024dc:	4b5e      	ldr	r3, [pc, #376]	; (8002658 <HAL_GPIO_Init+0x2f8>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4a5d      	ldr	r2, [pc, #372]	; (8002658 <HAL_GPIO_Init+0x2f8>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6213      	str	r3, [r2, #32]
 80024e8:	4b5b      	ldr	r3, [pc, #364]	; (8002658 <HAL_GPIO_Init+0x2f8>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80024f4:	4a59      	ldr	r2, [pc, #356]	; (800265c <HAL_GPIO_Init+0x2fc>)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	3302      	adds	r3, #2
 80024fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002500:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	220f      	movs	r2, #15
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a51      	ldr	r2, [pc, #324]	; (8002660 <HAL_GPIO_Init+0x300>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d025      	beq.n	800256c <HAL_GPIO_Init+0x20c>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a50      	ldr	r2, [pc, #320]	; (8002664 <HAL_GPIO_Init+0x304>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d01f      	beq.n	8002568 <HAL_GPIO_Init+0x208>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a4f      	ldr	r2, [pc, #316]	; (8002668 <HAL_GPIO_Init+0x308>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d019      	beq.n	8002564 <HAL_GPIO_Init+0x204>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a4e      	ldr	r2, [pc, #312]	; (800266c <HAL_GPIO_Init+0x30c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d013      	beq.n	8002560 <HAL_GPIO_Init+0x200>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a4d      	ldr	r2, [pc, #308]	; (8002670 <HAL_GPIO_Init+0x310>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d00d      	beq.n	800255c <HAL_GPIO_Init+0x1fc>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a4c      	ldr	r2, [pc, #304]	; (8002674 <HAL_GPIO_Init+0x314>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d007      	beq.n	8002558 <HAL_GPIO_Init+0x1f8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a4b      	ldr	r2, [pc, #300]	; (8002678 <HAL_GPIO_Init+0x318>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d101      	bne.n	8002554 <HAL_GPIO_Init+0x1f4>
 8002550:	2306      	movs	r3, #6
 8002552:	e00c      	b.n	800256e <HAL_GPIO_Init+0x20e>
 8002554:	2307      	movs	r3, #7
 8002556:	e00a      	b.n	800256e <HAL_GPIO_Init+0x20e>
 8002558:	2305      	movs	r3, #5
 800255a:	e008      	b.n	800256e <HAL_GPIO_Init+0x20e>
 800255c:	2304      	movs	r3, #4
 800255e:	e006      	b.n	800256e <HAL_GPIO_Init+0x20e>
 8002560:	2303      	movs	r3, #3
 8002562:	e004      	b.n	800256e <HAL_GPIO_Init+0x20e>
 8002564:	2302      	movs	r3, #2
 8002566:	e002      	b.n	800256e <HAL_GPIO_Init+0x20e>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <HAL_GPIO_Init+0x20e>
 800256c:	2300      	movs	r3, #0
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	f002 0203 	and.w	r2, r2, #3
 8002574:	0092      	lsls	r2, r2, #2
 8002576:	4093      	lsls	r3, r2
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800257e:	4937      	ldr	r1, [pc, #220]	; (800265c <HAL_GPIO_Init+0x2fc>)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	089b      	lsrs	r3, r3, #2
 8002584:	3302      	adds	r3, #2
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800258c:	4b3b      	ldr	r3, [pc, #236]	; (800267c <HAL_GPIO_Init+0x31c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025b0:	4a32      	ldr	r2, [pc, #200]	; (800267c <HAL_GPIO_Init+0x31c>)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025b6:	4b31      	ldr	r3, [pc, #196]	; (800267c <HAL_GPIO_Init+0x31c>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	43db      	mvns	r3, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025da:	4a28      	ldr	r2, [pc, #160]	; (800267c <HAL_GPIO_Init+0x31c>)
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025e0:	4b26      	ldr	r3, [pc, #152]	; (800267c <HAL_GPIO_Init+0x31c>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002604:	4a1d      	ldr	r2, [pc, #116]	; (800267c <HAL_GPIO_Init+0x31c>)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800260a:	4b1c      	ldr	r3, [pc, #112]	; (800267c <HAL_GPIO_Init+0x31c>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	43db      	mvns	r3, r3
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800262e:	4a13      	ldr	r2, [pc, #76]	; (800267c <HAL_GPIO_Init+0x31c>)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3301      	adds	r3, #1
 8002638:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	f47f ae97 	bne.w	8002378 <HAL_GPIO_Init+0x18>
  }
}
 800264a:	bf00      	nop
 800264c:	bf00      	nop
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	40010000 	.word	0x40010000
 8002660:	40020000 	.word	0x40020000
 8002664:	40020400 	.word	0x40020400
 8002668:	40020800 	.word	0x40020800
 800266c:	40020c00 	.word	0x40020c00
 8002670:	40021000 	.word	0x40021000
 8002674:	40021400 	.word	0x40021400
 8002678:	40021800 	.word	0x40021800
 800267c:	40010400 	.word	0x40010400

08002680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
 800268c:	4613      	mov	r3, r2
 800268e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002690:	787b      	ldrb	r3, [r7, #1]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800269c:	e003      	b.n	80026a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	041a      	lsls	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	619a      	str	r2, [r3, #24]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d006      	beq.n	80026d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fd70 	bl	80011b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40010400 	.word	0x40010400

080026e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e31d      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026f2:	4b94      	ldr	r3, [pc, #592]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026fc:	4b91      	ldr	r3, [pc, #580]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002704:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d07b      	beq.n	800280a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b08      	cmp	r3, #8
 8002716:	d006      	beq.n	8002726 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b0c      	cmp	r3, #12
 800271c:	d10f      	bne.n	800273e <HAL_RCC_OscConfig+0x5e>
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002724:	d10b      	bne.n	800273e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002726:	4b87      	ldr	r3, [pc, #540]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d06a      	beq.n	8002808 <HAL_RCC_OscConfig+0x128>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d166      	bne.n	8002808 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e2f7      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d106      	bne.n	8002754 <HAL_RCC_OscConfig+0x74>
 8002746:	4b7f      	ldr	r3, [pc, #508]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a7e      	ldr	r2, [pc, #504]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 800274c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e02d      	b.n	80027b0 <HAL_RCC_OscConfig+0xd0>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10c      	bne.n	8002776 <HAL_RCC_OscConfig+0x96>
 800275c:	4b79      	ldr	r3, [pc, #484]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a78      	ldr	r2, [pc, #480]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 8002762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	4b76      	ldr	r3, [pc, #472]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a75      	ldr	r2, [pc, #468]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 800276e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	e01c      	b.n	80027b0 <HAL_RCC_OscConfig+0xd0>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b05      	cmp	r3, #5
 800277c:	d10c      	bne.n	8002798 <HAL_RCC_OscConfig+0xb8>
 800277e:	4b71      	ldr	r3, [pc, #452]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a70      	ldr	r2, [pc, #448]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 8002784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b6e      	ldr	r3, [pc, #440]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a6d      	ldr	r2, [pc, #436]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 8002790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	e00b      	b.n	80027b0 <HAL_RCC_OscConfig+0xd0>
 8002798:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a69      	ldr	r2, [pc, #420]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 800279e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	4b67      	ldr	r3, [pc, #412]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a66      	ldr	r2, [pc, #408]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 80027aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d013      	beq.n	80027e0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7ff fce8 	bl	800218c <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c0:	f7ff fce4 	bl	800218c <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b64      	cmp	r3, #100	; 0x64
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e2ad      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027d2:	4b5c      	ldr	r3, [pc, #368]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0xe0>
 80027de:	e014      	b.n	800280a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7ff fcd4 	bl	800218c <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e8:	f7ff fcd0 	bl	800218c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e299      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027fa:	4b52      	ldr	r3, [pc, #328]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x108>
 8002806:	e000      	b.n	800280a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d05a      	beq.n	80028cc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2b04      	cmp	r3, #4
 800281a:	d005      	beq.n	8002828 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2b0c      	cmp	r3, #12
 8002820:	d119      	bne.n	8002856 <HAL_RCC_OscConfig+0x176>
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d116      	bne.n	8002856 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002828:	4b46      	ldr	r3, [pc, #280]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_OscConfig+0x160>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d001      	beq.n	8002840 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e276      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002840:	4b40      	ldr	r3, [pc, #256]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	021b      	lsls	r3, r3, #8
 800284e:	493d      	ldr	r1, [pc, #244]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002854:	e03a      	b.n	80028cc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d020      	beq.n	80028a0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800285e:	4b3a      	ldr	r3, [pc, #232]	; (8002948 <HAL_RCC_OscConfig+0x268>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7ff fc92 	bl	800218c <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800286c:	f7ff fc8e 	bl	800218c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e257      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800287e:	4b31      	ldr	r3, [pc, #196]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288a:	4b2e      	ldr	r3, [pc, #184]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	021b      	lsls	r3, r3, #8
 8002898:	492a      	ldr	r1, [pc, #168]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
 800289e:	e015      	b.n	80028cc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028a0:	4b29      	ldr	r3, [pc, #164]	; (8002948 <HAL_RCC_OscConfig+0x268>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a6:	f7ff fc71 	bl	800218c <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ae:	f7ff fc6d 	bl	800218c <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e236      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028c0:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f0      	bne.n	80028ae <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80b8 	beq.w	8002a4a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d170      	bne.n	80029c2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028e0:	4b18      	ldr	r3, [pc, #96]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_OscConfig+0x218>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e21a      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1a      	ldr	r2, [r3, #32]
 80028fc:	4b11      	ldr	r3, [pc, #68]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002904:	429a      	cmp	r2, r3
 8002906:	d921      	bls.n	800294c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4618      	mov	r0, r3
 800290e:	f000 fc57 	bl	80031c0 <RCC_SetFlashLatencyFromMSIRange>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e208      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	4906      	ldr	r1, [pc, #24]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800292e:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	061b      	lsls	r3, r3, #24
 800293c:	4901      	ldr	r1, [pc, #4]	; (8002944 <HAL_RCC_OscConfig+0x264>)
 800293e:	4313      	orrs	r3, r2
 8002940:	604b      	str	r3, [r1, #4]
 8002942:	e020      	b.n	8002986 <HAL_RCC_OscConfig+0x2a6>
 8002944:	40023800 	.word	0x40023800
 8002948:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800294c:	4b99      	ldr	r3, [pc, #612]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	4996      	ldr	r1, [pc, #600]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800295e:	4b95      	ldr	r3, [pc, #596]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	061b      	lsls	r3, r3, #24
 800296c:	4991      	ldr	r1, [pc, #580]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 800296e:	4313      	orrs	r3, r2
 8002970:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fc22 	bl	80031c0 <RCC_SetFlashLatencyFromMSIRange>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e1d3      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	0b5b      	lsrs	r3, r3, #13
 800298c:	3301      	adds	r3, #1
 800298e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002996:	4a87      	ldr	r2, [pc, #540]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002998:	6892      	ldr	r2, [r2, #8]
 800299a:	0912      	lsrs	r2, r2, #4
 800299c:	f002 020f 	and.w	r2, r2, #15
 80029a0:	4985      	ldr	r1, [pc, #532]	; (8002bb8 <HAL_RCC_OscConfig+0x4d8>)
 80029a2:	5c8a      	ldrb	r2, [r1, r2]
 80029a4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029a6:	4a85      	ldr	r2, [pc, #532]	; (8002bbc <HAL_RCC_OscConfig+0x4dc>)
 80029a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029aa:	4b85      	ldr	r3, [pc, #532]	; (8002bc0 <HAL_RCC_OscConfig+0x4e0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe ff4e 	bl	8001850 <HAL_InitTick>
 80029b4:	4603      	mov	r3, r0
 80029b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d045      	beq.n	8002a4a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	e1b5      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d029      	beq.n	8002a1e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029ca:	4b7e      	ldr	r3, [pc, #504]	; (8002bc4 <HAL_RCC_OscConfig+0x4e4>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7ff fbdc 	bl	800218c <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029d8:	f7ff fbd8 	bl	800218c <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e1a1      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029ea:	4b72      	ldr	r3, [pc, #456]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029f6:	4b6f      	ldr	r3, [pc, #444]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	496c      	ldr	r1, [pc, #432]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a08:	4b6a      	ldr	r3, [pc, #424]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	061b      	lsls	r3, r3, #24
 8002a16:	4967      	ldr	r1, [pc, #412]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
 8002a1c:	e015      	b.n	8002a4a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a1e:	4b69      	ldr	r3, [pc, #420]	; (8002bc4 <HAL_RCC_OscConfig+0x4e4>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7ff fbb2 	bl	800218c <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a2c:	f7ff fbae 	bl	800218c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e177      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a3e:	4b5d      	ldr	r3, [pc, #372]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d030      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d016      	beq.n	8002a8c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a5e:	4b5a      	ldr	r3, [pc, #360]	; (8002bc8 <HAL_RCC_OscConfig+0x4e8>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a64:	f7ff fb92 	bl	800218c <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a6c:	f7ff fb8e 	bl	800218c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e157      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a7e:	4b4d      	ldr	r3, [pc, #308]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x38c>
 8002a8a:	e015      	b.n	8002ab8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a8c:	4b4e      	ldr	r3, [pc, #312]	; (8002bc8 <HAL_RCC_OscConfig+0x4e8>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a92:	f7ff fb7b 	bl	800218c <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a9a:	f7ff fb77 	bl	800218c <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e140      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aac:	4b41      	ldr	r3, [pc, #260]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f0      	bne.n	8002a9a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80b5 	beq.w	8002c30 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aca:	4b3a      	ldr	r3, [pc, #232]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10d      	bne.n	8002af2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad6:	4b37      	ldr	r3, [pc, #220]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	4a36      	ldr	r2, [pc, #216]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	6253      	str	r3, [r2, #36]	; 0x24
 8002ae2:	4b34      	ldr	r3, [pc, #208]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aee:	2301      	movs	r3, #1
 8002af0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af2:	4b36      	ldr	r3, [pc, #216]	; (8002bcc <HAL_RCC_OscConfig+0x4ec>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d118      	bne.n	8002b30 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002afe:	4b33      	ldr	r3, [pc, #204]	; (8002bcc <HAL_RCC_OscConfig+0x4ec>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a32      	ldr	r2, [pc, #200]	; (8002bcc <HAL_RCC_OscConfig+0x4ec>)
 8002b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0a:	f7ff fb3f 	bl	800218c <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b12:	f7ff fb3b 	bl	800218c <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b64      	cmp	r3, #100	; 0x64
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e104      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b24:	4b29      	ldr	r3, [pc, #164]	; (8002bcc <HAL_RCC_OscConfig+0x4ec>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0x466>
 8002b38:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3c:	4a1d      	ldr	r2, [pc, #116]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b42:	6353      	str	r3, [r2, #52]	; 0x34
 8002b44:	e02d      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4c2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x488>
 8002b4e:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b52:	4a18      	ldr	r2, [pc, #96]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b58:	6353      	str	r3, [r2, #52]	; 0x34
 8002b5a:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5e:	4a15      	ldr	r2, [pc, #84]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002b60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b64:	6353      	str	r3, [r2, #52]	; 0x34
 8002b66:	e01c      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4c2>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b05      	cmp	r3, #5
 8002b6e:	d10c      	bne.n	8002b8a <HAL_RCC_OscConfig+0x4aa>
 8002b70:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b74:	4a0f      	ldr	r2, [pc, #60]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b7a:	6353      	str	r3, [r2, #52]	; 0x34
 8002b7c:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b80:	4a0c      	ldr	r2, [pc, #48]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b86:	6353      	str	r3, [r2, #52]	; 0x34
 8002b88:	e00b      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4c2>
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	4a09      	ldr	r2, [pc, #36]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002b90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b94:	6353      	str	r3, [r2, #52]	; 0x34
 8002b96:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9a:	4a06      	ldr	r2, [pc, #24]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002b9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ba0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d024      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002baa:	f7ff faef 	bl	800218c <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bb0:	e019      	b.n	8002be6 <HAL_RCC_OscConfig+0x506>
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	080047b8 	.word	0x080047b8
 8002bbc:	20000058 	.word	0x20000058
 8002bc0:	20000068 	.word	0x20000068
 8002bc4:	42470020 	.word	0x42470020
 8002bc8:	42470680 	.word	0x42470680
 8002bcc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd0:	f7ff fadc 	bl	800218c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e0a3      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002be6:	4b54      	ldr	r3, [pc, #336]	; (8002d38 <HAL_RCC_OscConfig+0x658>)
 8002be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0ee      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x4f0>
 8002bf2:	e014      	b.n	8002c1e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf4:	f7ff faca 	bl	800218c <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bfa:	e00a      	b.n	8002c12 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfc:	f7ff fac6 	bl	800218c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e08d      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c12:	4b49      	ldr	r3, [pc, #292]	; (8002d38 <HAL_RCC_OscConfig+0x658>)
 8002c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1ee      	bne.n	8002bfc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c1e:	7ffb      	ldrb	r3, [r7, #31]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d105      	bne.n	8002c30 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c24:	4b44      	ldr	r3, [pc, #272]	; (8002d38 <HAL_RCC_OscConfig+0x658>)
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	4a43      	ldr	r2, [pc, #268]	; (8002d38 <HAL_RCC_OscConfig+0x658>)
 8002c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d079      	beq.n	8002d2c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2b0c      	cmp	r3, #12
 8002c3c:	d056      	beq.n	8002cec <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d13b      	bne.n	8002cbe <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c46:	4b3d      	ldr	r3, [pc, #244]	; (8002d3c <HAL_RCC_OscConfig+0x65c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7ff fa9e 	bl	800218c <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c54:	f7ff fa9a 	bl	800218c <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e063      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c66:	4b34      	ldr	r3, [pc, #208]	; (8002d38 <HAL_RCC_OscConfig+0x658>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c72:	4b31      	ldr	r3, [pc, #196]	; (8002d38 <HAL_RCC_OscConfig+0x658>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	4319      	orrs	r1, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	492b      	ldr	r1, [pc, #172]	; (8002d38 <HAL_RCC_OscConfig+0x658>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c90:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <HAL_RCC_OscConfig+0x65c>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c96:	f7ff fa79 	bl	800218c <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7ff fa75 	bl	800218c <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e03e      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cb0:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <HAL_RCC_OscConfig+0x658>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x5be>
 8002cbc:	e036      	b.n	8002d2c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbe:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <HAL_RCC_OscConfig+0x65c>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7ff fa62 	bl	800218c <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7ff fa5e 	bl	800218c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e027      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cde:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <HAL_RCC_OscConfig+0x658>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x5ec>
 8002cea:	e01f      	b.n	8002d2c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e01a      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cf8:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <HAL_RCC_OscConfig+0x658>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d10d      	bne.n	8002d28 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d106      	bne.n	8002d28 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	42470060 	.word	0x42470060

08002d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e11a      	b.n	8002f8a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d54:	4b8f      	ldr	r3, [pc, #572]	; (8002f94 <HAL_RCC_ClockConfig+0x254>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d919      	bls.n	8002d96 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d105      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x34>
 8002d68:	4b8a      	ldr	r3, [pc, #552]	; (8002f94 <HAL_RCC_ClockConfig+0x254>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a89      	ldr	r2, [pc, #548]	; (8002f94 <HAL_RCC_ClockConfig+0x254>)
 8002d6e:	f043 0304 	orr.w	r3, r3, #4
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	4b87      	ldr	r3, [pc, #540]	; (8002f94 <HAL_RCC_ClockConfig+0x254>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f023 0201 	bic.w	r2, r3, #1
 8002d7c:	4985      	ldr	r1, [pc, #532]	; (8002f94 <HAL_RCC_ClockConfig+0x254>)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d84:	4b83      	ldr	r3, [pc, #524]	; (8002f94 <HAL_RCC_ClockConfig+0x254>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e0f9      	b.n	8002f8a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d008      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da2:	4b7d      	ldr	r3, [pc, #500]	; (8002f98 <HAL_RCC_ClockConfig+0x258>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	497a      	ldr	r1, [pc, #488]	; (8002f98 <HAL_RCC_ClockConfig+0x258>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 808e 	beq.w	8002ede <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dca:	4b73      	ldr	r3, [pc, #460]	; (8002f98 <HAL_RCC_ClockConfig+0x258>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d121      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e0d7      	b.n	8002f8a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002de2:	4b6d      	ldr	r3, [pc, #436]	; (8002f98 <HAL_RCC_ClockConfig+0x258>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d115      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e0cb      	b.n	8002f8a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d107      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dfa:	4b67      	ldr	r3, [pc, #412]	; (8002f98 <HAL_RCC_ClockConfig+0x258>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d109      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e0bf      	b.n	8002f8a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e0a:	4b63      	ldr	r3, [pc, #396]	; (8002f98 <HAL_RCC_ClockConfig+0x258>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e0b7      	b.n	8002f8a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e1a:	4b5f      	ldr	r3, [pc, #380]	; (8002f98 <HAL_RCC_ClockConfig+0x258>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f023 0203 	bic.w	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	495c      	ldr	r1, [pc, #368]	; (8002f98 <HAL_RCC_ClockConfig+0x258>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e2c:	f7ff f9ae 	bl	800218c <HAL_GetTick>
 8002e30:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d112      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e3c:	f7ff f9a6 	bl	800218c <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e09b      	b.n	8002f8a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e52:	4b51      	ldr	r3, [pc, #324]	; (8002f98 <HAL_RCC_ClockConfig+0x258>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d1ee      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xfc>
 8002e5e:	e03e      	b.n	8002ede <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d112      	bne.n	8002e8e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e68:	e00a      	b.n	8002e80 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6a:	f7ff f98f 	bl	800218c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e084      	b.n	8002f8a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e80:	4b45      	ldr	r3, [pc, #276]	; (8002f98 <HAL_RCC_ClockConfig+0x258>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 030c 	and.w	r3, r3, #12
 8002e88:	2b0c      	cmp	r3, #12
 8002e8a:	d1ee      	bne.n	8002e6a <HAL_RCC_ClockConfig+0x12a>
 8002e8c:	e027      	b.n	8002ede <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d11d      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e98:	f7ff f978 	bl	800218c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e06d      	b.n	8002f8a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eae:	4b3a      	ldr	r3, [pc, #232]	; (8002f98 <HAL_RCC_ClockConfig+0x258>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d1ee      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x158>
 8002eba:	e010      	b.n	8002ede <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ebc:	f7ff f966 	bl	800218c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e05b      	b.n	8002f8a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ed2:	4b31      	ldr	r3, [pc, #196]	; (8002f98 <HAL_RCC_ClockConfig+0x258>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1ee      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ede:	4b2d      	ldr	r3, [pc, #180]	; (8002f94 <HAL_RCC_ClockConfig+0x254>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d219      	bcs.n	8002f20 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d105      	bne.n	8002efe <HAL_RCC_ClockConfig+0x1be>
 8002ef2:	4b28      	ldr	r3, [pc, #160]	; (8002f94 <HAL_RCC_ClockConfig+0x254>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a27      	ldr	r2, [pc, #156]	; (8002f94 <HAL_RCC_ClockConfig+0x254>)
 8002ef8:	f043 0304 	orr.w	r3, r3, #4
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	4b25      	ldr	r3, [pc, #148]	; (8002f94 <HAL_RCC_ClockConfig+0x254>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 0201 	bic.w	r2, r3, #1
 8002f06:	4923      	ldr	r1, [pc, #140]	; (8002f94 <HAL_RCC_ClockConfig+0x254>)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0e:	4b21      	ldr	r3, [pc, #132]	; (8002f94 <HAL_RCC_ClockConfig+0x254>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e034      	b.n	8002f8a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f2c:	4b1a      	ldr	r3, [pc, #104]	; (8002f98 <HAL_RCC_ClockConfig+0x258>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4917      	ldr	r1, [pc, #92]	; (8002f98 <HAL_RCC_ClockConfig+0x258>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f4a:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <HAL_RCC_ClockConfig+0x258>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	490f      	ldr	r1, [pc, #60]	; (8002f98 <HAL_RCC_ClockConfig+0x258>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f5e:	f000 f823 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8002f62:	4602      	mov	r2, r0
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <HAL_RCC_ClockConfig+0x258>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	490b      	ldr	r1, [pc, #44]	; (8002f9c <HAL_RCC_ClockConfig+0x25c>)
 8002f70:	5ccb      	ldrb	r3, [r1, r3]
 8002f72:	fa22 f303 	lsr.w	r3, r2, r3
 8002f76:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <HAL_RCC_ClockConfig+0x260>)
 8002f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <HAL_RCC_ClockConfig+0x264>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe fc66 	bl	8001850 <HAL_InitTick>
 8002f84:	4603      	mov	r3, r0
 8002f86:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f88:	7afb      	ldrb	r3, [r7, #11]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40023c00 	.word	0x40023c00
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	080047b8 	.word	0x080047b8
 8002fa0:	20000058 	.word	0x20000058
 8002fa4:	20000068 	.word	0x20000068

08002fa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fac:	b08e      	sub	sp, #56	; 0x38
 8002fae:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002fb0:	4b58      	ldr	r3, [pc, #352]	; (8003114 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	2b0c      	cmp	r3, #12
 8002fbe:	d00d      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x34>
 8002fc0:	2b0c      	cmp	r3, #12
 8002fc2:	f200 8092 	bhi.w	80030ea <HAL_RCC_GetSysClockFreq+0x142>
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d002      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x28>
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x2e>
 8002fce:	e08c      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fd0:	4b51      	ldr	r3, [pc, #324]	; (8003118 <HAL_RCC_GetSysClockFreq+0x170>)
 8002fd2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fd4:	e097      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fd6:	4b51      	ldr	r3, [pc, #324]	; (800311c <HAL_RCC_GetSysClockFreq+0x174>)
 8002fd8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fda:	e094      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fde:	0c9b      	lsrs	r3, r3, #18
 8002fe0:	f003 020f 	and.w	r2, r3, #15
 8002fe4:	4b4e      	ldr	r3, [pc, #312]	; (8003120 <HAL_RCC_GetSysClockFreq+0x178>)
 8002fe6:	5c9b      	ldrb	r3, [r3, r2]
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fec:	0d9b      	lsrs	r3, r3, #22
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ff6:	4b47      	ldr	r3, [pc, #284]	; (8003114 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d021      	beq.n	8003046 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003004:	2200      	movs	r2, #0
 8003006:	61bb      	str	r3, [r7, #24]
 8003008:	61fa      	str	r2, [r7, #28]
 800300a:	4b44      	ldr	r3, [pc, #272]	; (800311c <HAL_RCC_GetSysClockFreq+0x174>)
 800300c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003010:	464a      	mov	r2, r9
 8003012:	fb03 f202 	mul.w	r2, r3, r2
 8003016:	2300      	movs	r3, #0
 8003018:	4644      	mov	r4, r8
 800301a:	fb04 f303 	mul.w	r3, r4, r3
 800301e:	4413      	add	r3, r2
 8003020:	4a3e      	ldr	r2, [pc, #248]	; (800311c <HAL_RCC_GetSysClockFreq+0x174>)
 8003022:	4644      	mov	r4, r8
 8003024:	fba4 0102 	umull	r0, r1, r4, r2
 8003028:	440b      	add	r3, r1
 800302a:	4619      	mov	r1, r3
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	2200      	movs	r2, #0
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	617a      	str	r2, [r7, #20]
 8003034:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003038:	f7fd f8a0 	bl	800017c <__aeabi_uldivmod>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4613      	mov	r3, r2
 8003042:	637b      	str	r3, [r7, #52]	; 0x34
 8003044:	e04e      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	2200      	movs	r2, #0
 800304a:	469a      	mov	sl, r3
 800304c:	4693      	mov	fp, r2
 800304e:	4652      	mov	r2, sl
 8003050:	465b      	mov	r3, fp
 8003052:	f04f 0000 	mov.w	r0, #0
 8003056:	f04f 0100 	mov.w	r1, #0
 800305a:	0159      	lsls	r1, r3, #5
 800305c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003060:	0150      	lsls	r0, r2, #5
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	ebb2 080a 	subs.w	r8, r2, sl
 800306a:	eb63 090b 	sbc.w	r9, r3, fp
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800307a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800307e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003082:	ebb2 0408 	subs.w	r4, r2, r8
 8003086:	eb63 0509 	sbc.w	r5, r3, r9
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	00eb      	lsls	r3, r5, #3
 8003094:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003098:	00e2      	lsls	r2, r4, #3
 800309a:	4614      	mov	r4, r2
 800309c:	461d      	mov	r5, r3
 800309e:	eb14 030a 	adds.w	r3, r4, sl
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	eb45 030b 	adc.w	r3, r5, fp
 80030a8:	607b      	str	r3, [r7, #4]
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030b6:	4629      	mov	r1, r5
 80030b8:	028b      	lsls	r3, r1, #10
 80030ba:	4620      	mov	r0, r4
 80030bc:	4629      	mov	r1, r5
 80030be:	4604      	mov	r4, r0
 80030c0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80030c4:	4601      	mov	r1, r0
 80030c6:	028a      	lsls	r2, r1, #10
 80030c8:	4610      	mov	r0, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	2200      	movs	r2, #0
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	60fa      	str	r2, [r7, #12]
 80030d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030d8:	f7fd f850 	bl	800017c <__aeabi_uldivmod>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4613      	mov	r3, r2
 80030e2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 80030e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030e8:	e00d      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80030ea:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <HAL_RCC_GetSysClockFreq+0x16c>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	0b5b      	lsrs	r3, r3, #13
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	3301      	adds	r3, #1
 80030fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003108:	4618      	mov	r0, r3
 800310a:	3738      	adds	r7, #56	; 0x38
 800310c:	46bd      	mov	sp, r7
 800310e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800
 8003118:	00f42400 	.word	0x00f42400
 800311c:	016e3600 	.word	0x016e3600
 8003120:	080047ac 	.word	0x080047ac

08003124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003128:	4b02      	ldr	r3, [pc, #8]	; (8003134 <HAL_RCC_GetHCLKFreq+0x10>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr
 8003134:	20000058 	.word	0x20000058

08003138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800313c:	f7ff fff2 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 8003140:	4602      	mov	r2, r0
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	0a1b      	lsrs	r3, r3, #8
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4903      	ldr	r1, [pc, #12]	; (800315c <HAL_RCC_GetPCLK1Freq+0x24>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40023800 	.word	0x40023800
 800315c:	080047c8 	.word	0x080047c8

08003160 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	220f      	movs	r2, #15
 800316e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003170:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_RCC_GetClockConfig+0x58>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0203 	and.w	r2, r3, #3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800317c:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <HAL_RCC_GetClockConfig+0x58>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <HAL_RCC_GetClockConfig+0x58>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <HAL_RCC_GetClockConfig+0x58>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	08db      	lsrs	r3, r3, #3
 800319a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80031a2:	4b06      	ldr	r3, [pc, #24]	; (80031bc <HAL_RCC_GetClockConfig+0x5c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0201 	and.w	r2, r3, #1
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	601a      	str	r2, [r3, #0]
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40023c00 	.word	0x40023c00

080031c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031c8:	2300      	movs	r3, #0
 80031ca:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80031cc:	4b29      	ldr	r3, [pc, #164]	; (8003274 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d12c      	bne.n	8003232 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031d8:	4b26      	ldr	r3, [pc, #152]	; (8003274 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80031e4:	4b24      	ldr	r3, [pc, #144]	; (8003278 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	e016      	b.n	800321e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f0:	4b20      	ldr	r3, [pc, #128]	; (8003274 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	4a1f      	ldr	r2, [pc, #124]	; (8003274 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80031f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fa:	6253      	str	r3, [r2, #36]	; 0x24
 80031fc:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003208:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003210:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003212:	4b18      	ldr	r3, [pc, #96]	; (8003274 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	4a17      	ldr	r2, [pc, #92]	; (8003274 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800321c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003224:	d105      	bne.n	8003232 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800322c:	d101      	bne.n	8003232 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800322e:	2301      	movs	r3, #1
 8003230:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003238:	4b10      	ldr	r3, [pc, #64]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a0f      	ldr	r2, [pc, #60]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800323e:	f043 0304 	orr.w	r3, r3, #4
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	4b0d      	ldr	r3, [pc, #52]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f023 0201 	bic.w	r2, r3, #1
 800324c:	490b      	ldr	r1, [pc, #44]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003254:	4b09      	ldr	r3, [pc, #36]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	429a      	cmp	r2, r3
 8003260:	d001      	beq.n	8003266 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800
 8003278:	40007000 	.word	0x40007000
 800327c:	40023c00 	.word	0x40023c00

08003280 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e07b      	b.n	800338a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	2b00      	cmp	r3, #0
 8003298:	d108      	bne.n	80032ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032a2:	d009      	beq.n	80032b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	61da      	str	r2, [r3, #28]
 80032aa:	e005      	b.n	80032b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fe f9fc 	bl	80016d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003328:	431a      	orrs	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333c:	ea42 0103 	orr.w	r1, r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	0c1b      	lsrs	r3, r3, #16
 8003356:	f003 0104 	and.w	r1, r3, #4
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	f003 0210 	and.w	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69da      	ldr	r2, [r3, #28]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003378:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b088      	sub	sp, #32
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	4613      	mov	r3, r2
 80033a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_SPI_Transmit+0x22>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e126      	b.n	8003602 <HAL_SPI_Transmit+0x270>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033bc:	f7fe fee6 	bl	800218c <HAL_GetTick>
 80033c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d002      	beq.n	80033d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
 80033d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033d6:	e10b      	b.n	80035f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_SPI_Transmit+0x52>
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d102      	bne.n	80033ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033e8:	e102      	b.n	80035f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2203      	movs	r2, #3
 80033ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	88fa      	ldrh	r2, [r7, #6]
 8003402:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	88fa      	ldrh	r2, [r7, #6]
 8003408:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003430:	d10f      	bne.n	8003452 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003440:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003450:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345c:	2b40      	cmp	r3, #64	; 0x40
 800345e:	d007      	beq.n	8003470 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800346e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003478:	d14b      	bne.n	8003512 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <HAL_SPI_Transmit+0xf6>
 8003482:	8afb      	ldrh	r3, [r7, #22]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d13e      	bne.n	8003506 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	881a      	ldrh	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	1c9a      	adds	r2, r3, #2
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034ac:	e02b      	b.n	8003506 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d112      	bne.n	80034e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c0:	881a      	ldrh	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	1c9a      	adds	r2, r3, #2
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	86da      	strh	r2, [r3, #54]	; 0x36
 80034e0:	e011      	b.n	8003506 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034e2:	f7fe fe53 	bl	800218c <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d803      	bhi.n	80034fa <HAL_SPI_Transmit+0x168>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f8:	d102      	bne.n	8003500 <HAL_SPI_Transmit+0x16e>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003504:	e074      	b.n	80035f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1ce      	bne.n	80034ae <HAL_SPI_Transmit+0x11c>
 8003510:	e04c      	b.n	80035ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <HAL_SPI_Transmit+0x18e>
 800351a:	8afb      	ldrh	r3, [r7, #22]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d140      	bne.n	80035a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	330c      	adds	r3, #12
 800352a:	7812      	ldrb	r2, [r2, #0]
 800352c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003546:	e02c      	b.n	80035a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d113      	bne.n	800357e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	7812      	ldrb	r2, [r2, #0]
 8003562:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	86da      	strh	r2, [r3, #54]	; 0x36
 800357c:	e011      	b.n	80035a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800357e:	f7fe fe05 	bl	800218c <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d803      	bhi.n	8003596 <HAL_SPI_Transmit+0x204>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d102      	bne.n	800359c <HAL_SPI_Transmit+0x20a>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d102      	bne.n	80035a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035a0:	e026      	b.n	80035f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1cd      	bne.n	8003548 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	6839      	ldr	r1, [r7, #0]
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f8b3 	bl	800371c <SPI_EndRxTxTransaction>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10a      	bne.n	80035e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	77fb      	strb	r3, [r7, #31]
 80035ec:	e000      	b.n	80035f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80035ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003600:	7ffb      	ldrb	r3, [r7, #31]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	4613      	mov	r3, r2
 800361a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800361c:	f7fe fdb6 	bl	800218c <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	4413      	add	r3, r2
 800362a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800362c:	f7fe fdae 	bl	800218c <HAL_GetTick>
 8003630:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003632:	4b39      	ldr	r3, [pc, #228]	; (8003718 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	015b      	lsls	r3, r3, #5
 8003638:	0d1b      	lsrs	r3, r3, #20
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	fb02 f303 	mul.w	r3, r2, r3
 8003640:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003642:	e054      	b.n	80036ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364a:	d050      	beq.n	80036ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800364c:	f7fe fd9e 	bl	800218c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	69fa      	ldr	r2, [r7, #28]
 8003658:	429a      	cmp	r2, r3
 800365a:	d902      	bls.n	8003662 <SPI_WaitFlagStateUntilTimeout+0x56>
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d13d      	bne.n	80036de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003670:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800367a:	d111      	bne.n	80036a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003684:	d004      	beq.n	8003690 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368e:	d107      	bne.n	80036a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800369e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036a8:	d10f      	bne.n	80036ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e017      	b.n	800370e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4013      	ands	r3, r2
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	bf0c      	ite	eq
 80036fe:	2301      	moveq	r3, #1
 8003700:	2300      	movne	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	429a      	cmp	r2, r3
 800370a:	d19b      	bne.n	8003644 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3720      	adds	r7, #32
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20000058 	.word	0x20000058

0800371c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af02      	add	r7, sp, #8
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003728:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <SPI_EndRxTxTransaction+0x7c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a1b      	ldr	r2, [pc, #108]	; (800379c <SPI_EndRxTxTransaction+0x80>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	0d5b      	lsrs	r3, r3, #21
 8003734:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003738:	fb02 f303 	mul.w	r3, r2, r3
 800373c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003746:	d112      	bne.n	800376e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2200      	movs	r2, #0
 8003750:	2180      	movs	r1, #128	; 0x80
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f7ff ff5a 	bl	800360c <SPI_WaitFlagStateUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d016      	beq.n	800378c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003762:	f043 0220 	orr.w	r2, r3, #32
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e00f      	b.n	800378e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	3b01      	subs	r3, #1
 8003778:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003784:	2b80      	cmp	r3, #128	; 0x80
 8003786:	d0f2      	beq.n	800376e <SPI_EndRxTxTransaction+0x52>
 8003788:	e000      	b.n	800378c <SPI_EndRxTxTransaction+0x70>
        break;
 800378a:	bf00      	nop
  }

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	20000058 	.word	0x20000058
 800379c:	165e9f81 	.word	0x165e9f81

080037a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e031      	b.n	8003816 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fd ffe4 	bl	8001794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3304      	adds	r3, #4
 80037dc:	4619      	mov	r1, r3
 80037de:	4610      	mov	r0, r2
 80037e0:	f000 fc0a 	bl	8003ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b01      	cmp	r3, #1
 8003832:	d001      	beq.n	8003838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e03a      	b.n	80038ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003858:	d00e      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x58>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a16      	ldr	r2, [pc, #88]	; (80038b8 <HAL_TIM_Base_Start_IT+0x98>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d009      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x58>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a14      	ldr	r2, [pc, #80]	; (80038bc <HAL_TIM_Base_Start_IT+0x9c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d004      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x58>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a13      	ldr	r2, [pc, #76]	; (80038c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d111      	bne.n	800389c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b06      	cmp	r3, #6
 8003888:	d010      	beq.n	80038ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0201 	orr.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800389a:	e007      	b.n	80038ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr
 80038b8:	40000400 	.word	0x40000400
 80038bc:	40000800 	.word	0x40000800
 80038c0:	40010800 	.word	0x40010800

080038c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e031      	b.n	800393a <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd ff34 	bl	8001758 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3304      	adds	r3, #4
 8003900:	4619      	mov	r1, r3
 8003902:	4610      	mov	r0, r2
 8003904:	f000 fb78 	bl	8003ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <HAL_TIM_PWM_Start+0x24>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b01      	cmp	r3, #1
 800395e:	bf14      	ite	ne
 8003960:	2301      	movne	r3, #1
 8003962:	2300      	moveq	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	e022      	b.n	80039ae <HAL_TIM_PWM_Start+0x6a>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b04      	cmp	r3, #4
 800396c:	d109      	bne.n	8003982 <HAL_TIM_PWM_Start+0x3e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b01      	cmp	r3, #1
 8003978:	bf14      	ite	ne
 800397a:	2301      	movne	r3, #1
 800397c:	2300      	moveq	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	e015      	b.n	80039ae <HAL_TIM_PWM_Start+0x6a>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b08      	cmp	r3, #8
 8003986:	d109      	bne.n	800399c <HAL_TIM_PWM_Start+0x58>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	bf14      	ite	ne
 8003994:	2301      	movne	r3, #1
 8003996:	2300      	moveq	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	e008      	b.n	80039ae <HAL_TIM_PWM_Start+0x6a>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	bf14      	ite	ne
 80039a8:	2301      	movne	r3, #1
 80039aa:	2300      	moveq	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e051      	b.n	8003a5a <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d104      	bne.n	80039c6 <HAL_TIM_PWM_Start+0x82>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80039c4:	e013      	b.n	80039ee <HAL_TIM_PWM_Start+0xaa>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d104      	bne.n	80039d6 <HAL_TIM_PWM_Start+0x92>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80039d4:	e00b      	b.n	80039ee <HAL_TIM_PWM_Start+0xaa>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d104      	bne.n	80039e6 <HAL_TIM_PWM_Start+0xa2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80039e4:	e003      	b.n	80039ee <HAL_TIM_PWM_Start+0xaa>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2202      	movs	r2, #2
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2201      	movs	r2, #1
 80039f4:	6839      	ldr	r1, [r7, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fd87 	bl	800450a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a04:	d00e      	beq.n	8003a24 <HAL_TIM_PWM_Start+0xe0>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a16      	ldr	r2, [pc, #88]	; (8003a64 <HAL_TIM_PWM_Start+0x120>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d009      	beq.n	8003a24 <HAL_TIM_PWM_Start+0xe0>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a14      	ldr	r2, [pc, #80]	; (8003a68 <HAL_TIM_PWM_Start+0x124>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d004      	beq.n	8003a24 <HAL_TIM_PWM_Start+0xe0>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a13      	ldr	r2, [pc, #76]	; (8003a6c <HAL_TIM_PWM_Start+0x128>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d111      	bne.n	8003a48 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b06      	cmp	r3, #6
 8003a34:	d010      	beq.n	8003a58 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f042 0201 	orr.w	r2, r2, #1
 8003a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a46:	e007      	b.n	8003a58 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40000400 	.word	0x40000400
 8003a68:	40000800 	.word	0x40000800
 8003a6c:	40010800 	.word	0x40010800

08003a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d122      	bne.n	8003acc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d11b      	bne.n	8003acc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0202 	mvn.w	r2, #2
 8003a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa85 	bl	8003fc2 <HAL_TIM_IC_CaptureCallback>
 8003ab8:	e005      	b.n	8003ac6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fa78 	bl	8003fb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fa87 	bl	8003fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d122      	bne.n	8003b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d11b      	bne.n	8003b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0204 	mvn.w	r2, #4
 8003af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2202      	movs	r2, #2
 8003af6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fa5b 	bl	8003fc2 <HAL_TIM_IC_CaptureCallback>
 8003b0c:	e005      	b.n	8003b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fa4e 	bl	8003fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fa5d 	bl	8003fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d122      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d11b      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0208 	mvn.w	r2, #8
 8003b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2204      	movs	r2, #4
 8003b4a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fa31 	bl	8003fc2 <HAL_TIM_IC_CaptureCallback>
 8003b60:	e005      	b.n	8003b6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 fa24 	bl	8003fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fa33 	bl	8003fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b10      	cmp	r3, #16
 8003b80:	d122      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d11b      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0210 	mvn.w	r2, #16
 8003b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2208      	movs	r2, #8
 8003b9e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fa07 	bl	8003fc2 <HAL_TIM_IC_CaptureCallback>
 8003bb4:	e005      	b.n	8003bc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f9fa 	bl	8003fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fa09 	bl	8003fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d10e      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d107      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0201 	mvn.w	r2, #1
 8003bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7fd fd2c 	bl	800164c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfe:	2b40      	cmp	r3, #64	; 0x40
 8003c00:	d10e      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0c:	2b40      	cmp	r3, #64	; 0x40
 8003c0e:	d107      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f9e3 	bl	8003fe6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e0ac      	b.n	8003d9c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b0c      	cmp	r3, #12
 8003c4e:	f200 809f 	bhi.w	8003d90 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003c52:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003c8d 	.word	0x08003c8d
 8003c5c:	08003d91 	.word	0x08003d91
 8003c60:	08003d91 	.word	0x08003d91
 8003c64:	08003d91 	.word	0x08003d91
 8003c68:	08003ccd 	.word	0x08003ccd
 8003c6c:	08003d91 	.word	0x08003d91
 8003c70:	08003d91 	.word	0x08003d91
 8003c74:	08003d91 	.word	0x08003d91
 8003c78:	08003d0f 	.word	0x08003d0f
 8003c7c:	08003d91 	.word	0x08003d91
 8003c80:	08003d91 	.word	0x08003d91
 8003c84:	08003d91 	.word	0x08003d91
 8003c88:	08003d4f 	.word	0x08003d4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fa20 	bl	80040d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0208 	orr.w	r2, r2, #8
 8003ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0204 	bic.w	r2, r2, #4
 8003cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6999      	ldr	r1, [r3, #24]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	619a      	str	r2, [r3, #24]
      break;
 8003cca:	e062      	b.n	8003d92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fa3c 	bl	8004150 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ce6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699a      	ldr	r2, [r3, #24]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6999      	ldr	r1, [r3, #24]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	021a      	lsls	r2, r3, #8
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	619a      	str	r2, [r3, #24]
      break;
 8003d0c:	e041      	b.n	8003d92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fa59 	bl	80041cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69da      	ldr	r2, [r3, #28]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 0208 	orr.w	r2, r2, #8
 8003d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69da      	ldr	r2, [r3, #28]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0204 	bic.w	r2, r2, #4
 8003d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69d9      	ldr	r1, [r3, #28]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	61da      	str	r2, [r3, #28]
      break;
 8003d4c:	e021      	b.n	8003d92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 fa76 	bl	8004246 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69da      	ldr	r2, [r3, #28]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69da      	ldr	r2, [r3, #28]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69d9      	ldr	r1, [r3, #28]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	021a      	lsls	r2, r3, #8
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	61da      	str	r2, [r3, #28]
      break;
 8003d8e:	e000      	b.n	8003d92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003d90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_TIM_ConfigClockSource+0x18>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e0b3      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x180>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003de2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003df4:	d03e      	beq.n	8003e74 <HAL_TIM_ConfigClockSource+0xd0>
 8003df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dfa:	f200 8087 	bhi.w	8003f0c <HAL_TIM_ConfigClockSource+0x168>
 8003dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e02:	f000 8085 	beq.w	8003f10 <HAL_TIM_ConfigClockSource+0x16c>
 8003e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0a:	d87f      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x168>
 8003e0c:	2b70      	cmp	r3, #112	; 0x70
 8003e0e:	d01a      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0xa2>
 8003e10:	2b70      	cmp	r3, #112	; 0x70
 8003e12:	d87b      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x168>
 8003e14:	2b60      	cmp	r3, #96	; 0x60
 8003e16:	d050      	beq.n	8003eba <HAL_TIM_ConfigClockSource+0x116>
 8003e18:	2b60      	cmp	r3, #96	; 0x60
 8003e1a:	d877      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x168>
 8003e1c:	2b50      	cmp	r3, #80	; 0x50
 8003e1e:	d03c      	beq.n	8003e9a <HAL_TIM_ConfigClockSource+0xf6>
 8003e20:	2b50      	cmp	r3, #80	; 0x50
 8003e22:	d873      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x168>
 8003e24:	2b40      	cmp	r3, #64	; 0x40
 8003e26:	d058      	beq.n	8003eda <HAL_TIM_ConfigClockSource+0x136>
 8003e28:	2b40      	cmp	r3, #64	; 0x40
 8003e2a:	d86f      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x168>
 8003e2c:	2b30      	cmp	r3, #48	; 0x30
 8003e2e:	d064      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0x156>
 8003e30:	2b30      	cmp	r3, #48	; 0x30
 8003e32:	d86b      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x168>
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d060      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0x156>
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d867      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x168>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d05c      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0x156>
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d05a      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e44:	e062      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6899      	ldr	r1, [r3, #8]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f000 fb39 	bl	80044cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e68:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	609a      	str	r2, [r3, #8]
      break;
 8003e72:	e04e      	b.n	8003f12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6818      	ldr	r0, [r3, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	6899      	ldr	r1, [r3, #8]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f000 fb22 	bl	80044cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e96:	609a      	str	r2, [r3, #8]
      break;
 8003e98:	e03b      	b.n	8003f12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6859      	ldr	r1, [r3, #4]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f000 fa99 	bl	80043de <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2150      	movs	r1, #80	; 0x50
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 faf0 	bl	8004498 <TIM_ITRx_SetConfig>
      break;
 8003eb8:	e02b      	b.n	8003f12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	6859      	ldr	r1, [r3, #4]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f000 fab7 	bl	800443a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2160      	movs	r1, #96	; 0x60
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fae0 	bl	8004498 <TIM_ITRx_SetConfig>
      break;
 8003ed8:	e01b      	b.n	8003f12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6818      	ldr	r0, [r3, #0]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	6859      	ldr	r1, [r3, #4]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f000 fa79 	bl	80043de <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2140      	movs	r1, #64	; 0x40
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fad0 	bl	8004498 <TIM_ITRx_SetConfig>
      break;
 8003ef8:	e00b      	b.n	8003f12 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4619      	mov	r1, r3
 8003f04:	4610      	mov	r0, r2
 8003f06:	f000 fac7 	bl	8004498 <TIM_ITRx_SetConfig>
        break;
 8003f0a:	e002      	b.n	8003f12 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f0c:	bf00      	nop
 8003f0e:	e000      	b.n	8003f12 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e031      	b.n	8003fa8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003f54:	6839      	ldr	r1, [r7, #0]
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f9b3 	bl	80042c2 <TIM_SlaveTimer_SetConfig>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    __HAL_UNLOCK(htim);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e018      	b.n	8003fa8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f84:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f94:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400e:	d00f      	beq.n	8004030 <TIM_Base_SetConfig+0x38>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a2b      	ldr	r2, [pc, #172]	; (80040c0 <TIM_Base_SetConfig+0xc8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00b      	beq.n	8004030 <TIM_Base_SetConfig+0x38>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a2a      	ldr	r2, [pc, #168]	; (80040c4 <TIM_Base_SetConfig+0xcc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d007      	beq.n	8004030 <TIM_Base_SetConfig+0x38>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a29      	ldr	r2, [pc, #164]	; (80040c8 <TIM_Base_SetConfig+0xd0>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_Base_SetConfig+0x38>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a28      	ldr	r2, [pc, #160]	; (80040cc <TIM_Base_SetConfig+0xd4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d108      	bne.n	8004042 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004048:	d017      	beq.n	800407a <TIM_Base_SetConfig+0x82>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a1c      	ldr	r2, [pc, #112]	; (80040c0 <TIM_Base_SetConfig+0xc8>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <TIM_Base_SetConfig+0x82>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a1b      	ldr	r2, [pc, #108]	; (80040c4 <TIM_Base_SetConfig+0xcc>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00f      	beq.n	800407a <TIM_Base_SetConfig+0x82>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a1a      	ldr	r2, [pc, #104]	; (80040c8 <TIM_Base_SetConfig+0xd0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00b      	beq.n	800407a <TIM_Base_SetConfig+0x82>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a19      	ldr	r2, [pc, #100]	; (80040cc <TIM_Base_SetConfig+0xd4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d007      	beq.n	800407a <TIM_Base_SetConfig+0x82>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a18      	ldr	r2, [pc, #96]	; (80040d0 <TIM_Base_SetConfig+0xd8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d003      	beq.n	800407a <TIM_Base_SetConfig+0x82>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a17      	ldr	r2, [pc, #92]	; (80040d4 <TIM_Base_SetConfig+0xdc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d108      	bne.n	800408c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	615a      	str	r2, [r3, #20]
}
 80040b6:	bf00      	nop
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr
 80040c0:	40000400 	.word	0x40000400
 80040c4:	40000800 	.word	0x40000800
 80040c8:	40000c00 	.word	0x40000c00
 80040cc:	40010800 	.word	0x40010800
 80040d0:	40010c00 	.word	0x40010c00
 80040d4:	40011000 	.word	0x40011000

080040d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	f023 0201 	bic.w	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0303 	bic.w	r3, r3, #3
 800410e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f023 0302 	bic.w	r3, r3, #2
 8004120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	621a      	str	r2, [r3, #32]
}
 8004146:	bf00      	nop
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr

08004150 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f023 0210 	bic.w	r2, r3, #16
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	021b      	lsls	r3, r3, #8
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4313      	orrs	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f023 0320 	bic.w	r3, r3, #32
 800419a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	621a      	str	r2, [r3, #32]
}
 80041c2:	bf00      	nop
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr

080041cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0303 	bic.w	r3, r3, #3
 8004202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	621a      	str	r2, [r3, #32]
}
 800423c:	bf00      	nop
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	4770      	bx	lr

08004246 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004246:	b480      	push	{r7}
 8004248:	b087      	sub	sp, #28
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004274:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	031b      	lsls	r3, r3, #12
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	621a      	str	r2, [r3, #32]
}
 80042b8:	bf00      	nop
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr

080042c2 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b086      	sub	sp, #24
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042da:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f023 0307 	bic.w	r3, r3, #7
 80042ec:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b70      	cmp	r3, #112	; 0x70
 8004306:	d01a      	beq.n	800433e <TIM_SlaveTimer_SetConfig+0x7c>
 8004308:	2b70      	cmp	r3, #112	; 0x70
 800430a:	d860      	bhi.n	80043ce <TIM_SlaveTimer_SetConfig+0x10c>
 800430c:	2b60      	cmp	r3, #96	; 0x60
 800430e:	d054      	beq.n	80043ba <TIM_SlaveTimer_SetConfig+0xf8>
 8004310:	2b60      	cmp	r3, #96	; 0x60
 8004312:	d85c      	bhi.n	80043ce <TIM_SlaveTimer_SetConfig+0x10c>
 8004314:	2b50      	cmp	r3, #80	; 0x50
 8004316:	d046      	beq.n	80043a6 <TIM_SlaveTimer_SetConfig+0xe4>
 8004318:	2b50      	cmp	r3, #80	; 0x50
 800431a:	d858      	bhi.n	80043ce <TIM_SlaveTimer_SetConfig+0x10c>
 800431c:	2b40      	cmp	r3, #64	; 0x40
 800431e:	d019      	beq.n	8004354 <TIM_SlaveTimer_SetConfig+0x92>
 8004320:	2b40      	cmp	r3, #64	; 0x40
 8004322:	d854      	bhi.n	80043ce <TIM_SlaveTimer_SetConfig+0x10c>
 8004324:	2b30      	cmp	r3, #48	; 0x30
 8004326:	d054      	beq.n	80043d2 <TIM_SlaveTimer_SetConfig+0x110>
 8004328:	2b30      	cmp	r3, #48	; 0x30
 800432a:	d850      	bhi.n	80043ce <TIM_SlaveTimer_SetConfig+0x10c>
 800432c:	2b20      	cmp	r3, #32
 800432e:	d050      	beq.n	80043d2 <TIM_SlaveTimer_SetConfig+0x110>
 8004330:	2b20      	cmp	r3, #32
 8004332:	d84c      	bhi.n	80043ce <TIM_SlaveTimer_SetConfig+0x10c>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d04c      	beq.n	80043d2 <TIM_SlaveTimer_SetConfig+0x110>
 8004338:	2b10      	cmp	r3, #16
 800433a:	d04a      	beq.n	80043d2 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800433c:	e047      	b.n	80043ce <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68d9      	ldr	r1, [r3, #12]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f000 f8bd 	bl	80044cc <TIM_ETR_SetConfig>
      break;
 8004352:	e03f      	b.n	80043d4 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b05      	cmp	r3, #5
 800435a:	d101      	bne.n	8004360 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e03a      	b.n	80043d6 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6a1a      	ldr	r2, [r3, #32]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0201 	bic.w	r2, r2, #1
 8004376:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004386:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4313      	orrs	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	621a      	str	r2, [r3, #32]
      break;
 80043a4:	e016      	b.n	80043d4 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6899      	ldr	r1, [r3, #8]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	461a      	mov	r2, r3
 80043b4:	f000 f813 	bl	80043de <TIM_TI1_ConfigInputStage>
      break;
 80043b8:	e00c      	b.n	80043d4 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6899      	ldr	r1, [r3, #8]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	461a      	mov	r2, r3
 80043c8:	f000 f837 	bl	800443a <TIM_TI2_ConfigInputStage>
      break;
 80043cc:	e002      	b.n	80043d4 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80043ce:	bf00      	nop
 80043d0:	e000      	b.n	80043d4 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80043d2:	bf00      	nop
  }
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043de:	b480      	push	{r7}
 80043e0:	b087      	sub	sp, #28
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	f023 0201 	bic.w	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004408:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f023 030a 	bic.w	r3, r3, #10
 800441a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	621a      	str	r2, [r3, #32]
}
 8004430:	bf00      	nop
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr

0800443a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800443a:	b480      	push	{r7}
 800443c:	b087      	sub	sp, #28
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f023 0210 	bic.w	r2, r3, #16
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004464:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	031b      	lsls	r3, r3, #12
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004476:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	621a      	str	r2, [r3, #32]
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f043 0307 	orr.w	r3, r3, #7
 80044ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	609a      	str	r2, [r3, #8]
}
 80044c2:	bf00      	nop
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	021a      	lsls	r2, r3, #8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	609a      	str	r2, [r3, #8]
}
 8004500:	bf00      	nop
 8004502:	371c      	adds	r7, #28
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr

0800450a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800450a:	b480      	push	{r7}
 800450c:	b087      	sub	sp, #28
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f003 031f 	and.w	r3, r3, #31
 800451c:	2201      	movs	r2, #1
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a1a      	ldr	r2, [r3, #32]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	43db      	mvns	r3, r3
 800452c:	401a      	ands	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a1a      	ldr	r2, [r3, #32]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	fa01 f303 	lsl.w	r3, r1, r3
 8004542:	431a      	orrs	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	621a      	str	r2, [r3, #32]
}
 8004548:	bf00      	nop
 800454a:	371c      	adds	r7, #28
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr
	...

08004554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004568:	2302      	movs	r3, #2
 800456a:	e046      	b.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004592:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ae:	d00e      	beq.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a13      	ldr	r2, [pc, #76]	; (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d009      	beq.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a12      	ldr	r2, [pc, #72]	; (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d004      	beq.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a10      	ldr	r2, [pc, #64]	; (800460c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d10c      	bne.n	80045e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr
 8004604:	40000400 	.word	0x40000400
 8004608:	40000800 	.word	0x40000800
 800460c:	40010800 	.word	0x40010800

08004610 <timer_init>:
 * 
 * @param _timer_handler pointer to the timer handler
 * 
 * @return HAL_OK
 */
HAL_StatusTypeDef timer_init(TypeDef_Timer_Handler * _timer_handler) {
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]

	timer_handler = _timer_handler;
 8004618:	4a0f      	ldr	r2, [pc, #60]	; (8004658 <timer_init+0x48>)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6013      	str	r3, [r2, #0]

	//start timer
	HAL_TIM_Base_Start_IT(timer_handler->htim);
 800461e:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <timer_init+0x48>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff f8fb 	bl	8003820 <HAL_TIM_Base_Start_IT>

	//init interrupt frequence
	timer_handler->htim->Instance->ARR = 100;
 800462a:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <timer_init+0x48>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2264      	movs	r2, #100	; 0x64
 8004634:	62da      	str	r2, [r3, #44]	; 0x2c

	timer_handler->callback_function = function_list;
 8004636:	4b08      	ldr	r3, [pc, #32]	; (8004658 <timer_init+0x48>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a08      	ldr	r2, [pc, #32]	; (800465c <timer_init+0x4c>)
 800463c:	615a      	str	r2, [r3, #20]
	timer_handler->timer_frequence = 0;
 800463e:	4b06      	ldr	r3, [pc, #24]	; (8004658 <timer_init+0x48>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2200      	movs	r2, #0
 8004644:	60da      	str	r2, [r3, #12]
	timer_handler->timer_is_running = 0;
 8004646:	4b04      	ldr	r3, [pc, #16]	; (8004658 <timer_init+0x48>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2200      	movs	r2, #0
 800464c:	741a      	strb	r2, [r3, #16]

	return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	200001dc 	.word	0x200001dc
 800465c:	080047d0 	.word	0x080047d0

08004660 <set_interrupt_launcher>:
/**
 * It sets the interrupt handler to the chosen function
 * 
 * @param _chosen_function the function you want to call
 */
void set_interrupt_launcher(TIMER_Enum _chosen_function) {
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	71fb      	strb	r3, [r7, #7]
	timer_handler->chosen_function = timer_handler->callback_function[_chosen_function];
 800466a:	4b11      	ldr	r3, [pc, #68]	; (80046b0 <set_interrupt_launcher+0x50>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6959      	ldr	r1, [r3, #20]
 8004670:	79fa      	ldrb	r2, [r7, #7]
 8004672:	4613      	mov	r3, r2
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	18ca      	adds	r2, r1, r3
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <set_interrupt_launcher+0x50>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	ca07      	ldmia	r2, {r0, r1, r2}
 8004682:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	timer_handler->htim->Instance->ARR = timer_handler->callback_function[_chosen_function].frequence;
 8004686:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <set_interrupt_launcher+0x50>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6959      	ldr	r1, [r3, #20]
 800468c:	79fa      	ldrb	r2, [r7, #7]
 800468e:	4613      	mov	r3, r2
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	18ca      	adds	r2, r1, r3
 8004698:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <set_interrupt_launcher+0x50>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6892      	ldr	r2, [r2, #8]
 80046a2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bc80      	pop	{r7}
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	200001dc 	.word	0x200001dc

080046b4 <start_timer>:

/**
 * It sets the timer_is_running flag to 1
 */
void start_timer(void) { timer_handler->timer_is_running = 1; }
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	4b03      	ldr	r3, [pc, #12]	; (80046c8 <start_timer+0x14>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2201      	movs	r2, #1
 80046be:	741a      	strb	r2, [r3, #16]
 80046c0:	bf00      	nop
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr
 80046c8:	200001dc 	.word	0x200001dc

080046cc <stop_timer>:

/**
 * > The function `stop_timer()` sets the `timer_is_running` flag to 0
 */
void stop_timer(void) { timer_handler->timer_is_running = 0; }
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	4b03      	ldr	r3, [pc, #12]	; (80046e0 <stop_timer+0x14>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2200      	movs	r2, #0
 80046d6:	741a      	strb	r2, [r3, #16]
 80046d8:	bf00      	nop
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr
 80046e0:	200001dc 	.word	0x200001dc

080046e4 <__libc_init_array>:
 80046e4:	b570      	push	{r4, r5, r6, lr}
 80046e6:	2600      	movs	r6, #0
 80046e8:	4d0c      	ldr	r5, [pc, #48]	; (800471c <__libc_init_array+0x38>)
 80046ea:	4c0d      	ldr	r4, [pc, #52]	; (8004720 <__libc_init_array+0x3c>)
 80046ec:	1b64      	subs	r4, r4, r5
 80046ee:	10a4      	asrs	r4, r4, #2
 80046f0:	42a6      	cmp	r6, r4
 80046f2:	d109      	bne.n	8004708 <__libc_init_array+0x24>
 80046f4:	f000 f822 	bl	800473c <_init>
 80046f8:	2600      	movs	r6, #0
 80046fa:	4d0a      	ldr	r5, [pc, #40]	; (8004724 <__libc_init_array+0x40>)
 80046fc:	4c0a      	ldr	r4, [pc, #40]	; (8004728 <__libc_init_array+0x44>)
 80046fe:	1b64      	subs	r4, r4, r5
 8004700:	10a4      	asrs	r4, r4, #2
 8004702:	42a6      	cmp	r6, r4
 8004704:	d105      	bne.n	8004712 <__libc_init_array+0x2e>
 8004706:	bd70      	pop	{r4, r5, r6, pc}
 8004708:	f855 3b04 	ldr.w	r3, [r5], #4
 800470c:	4798      	blx	r3
 800470e:	3601      	adds	r6, #1
 8004710:	e7ee      	b.n	80046f0 <__libc_init_array+0xc>
 8004712:	f855 3b04 	ldr.w	r3, [r5], #4
 8004716:	4798      	blx	r3
 8004718:	3601      	adds	r6, #1
 800471a:	e7f2      	b.n	8004702 <__libc_init_array+0x1e>
 800471c:	080047e4 	.word	0x080047e4
 8004720:	080047e4 	.word	0x080047e4
 8004724:	080047e4 	.word	0x080047e4
 8004728:	080047e8 	.word	0x080047e8

0800472c <memset>:
 800472c:	4603      	mov	r3, r0
 800472e:	4402      	add	r2, r0
 8004730:	4293      	cmp	r3, r2
 8004732:	d100      	bne.n	8004736 <memset+0xa>
 8004734:	4770      	bx	lr
 8004736:	f803 1b01 	strb.w	r1, [r3], #1
 800473a:	e7f9      	b.n	8004730 <memset+0x4>

0800473c <_init>:
 800473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473e:	bf00      	nop
 8004740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004742:	bc08      	pop	{r3}
 8004744:	469e      	mov	lr, r3
 8004746:	4770      	bx	lr

08004748 <_fini>:
 8004748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474a:	bf00      	nop
 800474c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800474e:	bc08      	pop	{r3}
 8004750:	469e      	mov	lr, r3
 8004752:	4770      	bx	lr
